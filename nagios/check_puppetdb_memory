#!/usr/bin/perl

# Copyright (c) 2012 Jason Hancock <jsnbyh@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# This file is part of the nagios-puppet bundle that can be found
# at https://github.com/jasonhancock/nagios-puppetdb

use strict;
use warnings;
use JSON;
use LWP;
use Nagios::Plugin;
use Nagios::Plugin::Threshold;

my $np = Nagios::Plugin->new(
    usage     => "Usage: %s [-H|--host=<host> ] [ -p|--port=<port> ] [-s]\n"
               . "        [-w|--warning=<warning>] [-c|--critical=<critical>]",
    shortname => 'Java Memory',
);

$np->add_arg(
    spec     => 'host|H=s',
    help     => '-H, --host=Hostname or IP address',
    required => 1,
);

$np->add_arg(
    spec     => 'warning|w=s',
    help     => '-w, --warning=percent',
    default  => 85,
);

$np->add_arg(
    spec     => 'critical|c=s',
    help     => '-c, --critical=percent',
    default  => 92,
);

$np->add_arg(
    spec    => 'port|p=s',
    help    => '-p, --port=port',
    default => 80,
);

$np->add_arg(
    spec    => 'ssl|s',
    help    => '-s, --ssl   Use SSL (For when PuppetDB is behind https)',
);

$np->getopts;

my $base_url = sprintf('http%s://%s:%d/v2/metrics/mbean/', 
    defined($np->opts->ssl) ? 's' : '',
    $np->opts->host,
    $np->opts->port
);

my $ua = new LWP::UserAgent;
$ua->default_header('Accept' => 'application/json');


my $url = $base_url . 'java.lang:type=Memory'; 
my $response = $ua->get($url);

if (!$response->is_success) {
    # We failed
    $np->nagios_exit('UNKNOWN', $response->code . ": " . $response->status_line);
}

my $data = decode_json($response->decoded_content);

$np->add_perfdata(
    label => 'init',
    value => $data->{'HeapMemoryUsage'}->{'init'}, 
    uom   => undef,
);

$np->add_perfdata(
    label => 'maximum',
    value => $data->{'HeapMemoryUsage'}->{'max'}, 
    uom   => undef,
);

$np->add_perfdata(
    label => 'used',
    value => $data->{'HeapMemoryUsage'}->{'used'}, 
    uom   => undef,
);

my $code = $np->check_threshold(
    check    => $data->{'HeapMemoryUsage'}->{'used'},
    warning  => $np->opts->warning  * .01 * $data->{'HeapMemoryUsage'}->{'max'},
    critical => $np->opts->critical * .01 * $data->{'HeapMemoryUsage'}->{'max'},
);

sub BytesToReadableString {
   my $c = $_[0];
   $c >= 1073741824 ? sprintf("%0.2fGB", $c/1073741824)
      : $c >= 1048576 ? sprintf("%0.2fMB", $c/1048576)
      : $c >= 1024 ? sprintf("%0.2fKB", $c/1024)
      : $c . "bytes";
}

$np->nagios_exit(
    return_code => $code,
    message     => sprintf('used: %s init: %s maximum: %s',
        BytesToReadableString($data->{'HeapMemoryUsage'}->{'used'}),
        BytesToReadableString($data->{'HeapMemoryUsage'}->{'init'}),
        BytesToReadableString($data->{'HeapMemoryUsage'}->{'max'}),
    ),
);

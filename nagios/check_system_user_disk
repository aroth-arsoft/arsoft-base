#!/bin/bash
#
# check_system_user_disk - nagios plugin
#
# Checks for required disk space on system or user disks
#
# http://vwiki.co.uk/Nagios

# Include standard Nagios library
THIS_FILE=`readlink -f "$0"`
PROGNAME=`basename "$THIS_FILE"`
PROGPATH=`dirname "$THIS_FILE"`

CHECK_DISK_PLUGIN='/usr/lib/nagios/plugins/check_disk'

. $PROGPATH/utils.sh || exit 3

check_user_disk=0
verbose=0

function usage() {
	echo "usage: check_system_disk"
	echo "  -h, -?, --help          shows this usage information."
	echo "  -v, --verbose           enables the verbose output."
	echo "  --user                  checks only the user disks."
	echo "  --system                checks only the system disks."
	exit 0
}

# parse command line arguments
while [ $# -ne 0 ]; do
	case "$1" in
	"-?"|"-h"|"--help") usage;;
	'-v'|'--verbose') verbose=1; ;;
	"--user") check_user_disk=1; ;;
	"--system") check_user_disk=0; ;;
	*)
		echo "Unrecognized parameter $1" 2>&1
		exit 1
	;;
	esac
	shift
done

root_warning='20%'
root_critical='10%'

boot_warning='30'
boot_critical='15'

tmp_warning='25%'
tmp_critical='15%'

var_warning='30%'
var_critical='20%'

usr_warning='10%'
usr_critical='5%'

home_warning='15%'
home_critical='8%'

user_warning='5%'
user_critical='2%'

# find partition name for a given filename
function findpart() { 
	df -P "$1"  | awk '/^\/dev/ {print $1}' || false
}

# find partition name for a given filename
function all_local_partitions() { 
	df | awk '/^\/dev/ {print $1}' || false
}

function all_system_partitions() {
	df -P '/' '/boot' '/var' '/usr' '/home' | awk '/^\/dev/ {print $1}' || false
}

function check_part() {
	local name="$1"
	local _partition_for_directory=`findpart "$2"`
	local _warning_var="${1}_warning"
	local _critical_var="${1}_critical"

	if [[ "$_check_disk_args" != *"--partition=${_partition_for_directory}"* ]]; then
		_check_disk_args="$_check_disk_args --warning=${!_warning_var} --critical=${!_critical_var} --partition=${_partition_for_directory}"
	fi
}

function check_user_part() {
	if [[ "$_check_disk_args" != *"--partition=${1}"* ]]; then
		_check_disk_args="$_check_disk_args --warning=${user_warning} --critical=${user_critical} --partition=${1}"
	fi
}

function check_path() {
	local name="$1"
	local _warning_var="${1}_warning"
	local _critical_var="${1}_critical"
	
	if [[ "$_check_disk_args" != *"--path=${2}"* ]]; then
		_check_disk_args="$_check_disk_args --warning=${!_warning_var} --critical=${!_critical_var} --path=${2}"
	fi
}

_check_disk_args='-L'

if [ $check_user_disk -eq 0 ]; then
	check_part 'root' '/'
	check_part 'boot' '/boot'
	check_path 'tmp' '/tmp'
	check_part 'var' '/var'
	check_part 'usr' '/usr'
	check_part 'home' '/home'
else
	system_parts=`all_system_partitions`
	for part in `all_local_partitions`; do
		if [[ "$system_parts" != *"${part}"* ]]; then
			check_user_part "$part"
		fi
	done
fi

[ $verbose -ne 0 ] && echo "$CHECK_DISK_PLUGIN $_check_disk_args"
exec "$CHECK_DISK_PLUGIN" $_check_disk_args

#!/bin/bash

verbose=0
repo_svn=''
repo_git=''
mail_domain=''

function usage()
{
    echo "svn2git <svnrepo> <gitrepo>"
    echo "    -h, --help      shows this help screen"
    echo "    -v, --verbose   enable verbose output"
    echo "    --domain        specifies the domain for the users"
    exit 0
}

function verbose_exec()
{
    [ $verbose -ne 0 ] && echo "$@"
    "$@"
}

# parse command line arguments
while [ $# -ne 0 ]; do
    case "$1" in
        "-?") usage;;
        "-h") usage;;
        "--help") usage;;
        "--domain") mail_domain="$2"; shift; ;;
        '-v'|'--verbose') verbose=1; ;;
        *)
            if [ -z "$repo_svn" ]; then
                repo_svn="$1"
            elif [ -z "$repo_git" ]; then
                repo_git="$1"
            else
                echo "Both repositories has alreayd been specified (svn: $repo_svn, git: $repo_git)."
                exit 1
            fi
            ;;
    esac
    shift
done

if [ -z "$repo_svn" ]; then
	echo "No SVN source repository specified."
	exit 1
fi

if [ -z "$repo_git" ]; then
	echo "No GIT target repository specified."
	exit 1
fi

[ ! -d "$repo_git" ] && mkdir -p "$repo_git"

[ -z "$mail_domain" ] && mail_domain=`domainname`

author_map_temp=`mktemp /tmp/svn2git.XXXXXX`
echo "Gathering information about authors..."
svn log "$repo_svn" |\
	sed -ne "s/^r[^|]*| \([^ ]*\) |.*\$/\1 = \1 <\1@$domain>/p" |\
	sort -u > "$author_map_temp"
	
[ $verbose -ne 0 ] && echo "Author map: " && cat "$author_map_temp"

pushd "$repo_git" > /dev/null
echo "Cloning the SVN repository into GIT..."
git svn clone -A "$author_map_temp" --no-metadata --preserve-empty-dirs -s "$repo_svn" 

echo "Fetching the SVN repository..."
git svn fetch

echo "Removing useless commits..."
git filter-branch --prune-empty --tag-name-filter cat -- --all

echo "Changing tagging commits to tags..."
git for-each-ref --format="%(refname)" refs/remotes/tags/ |
while read tag; do
    GIT_COMMITTER_DATE="$(git log -1 --pretty=format:"%ad" "$tag")" \
    GIT_COMMITTER_EMAIL="$(git log -1 --pretty=format:"%ce" "$tag")" \
    GIT_COMMITTER_NAME="$(git log -1 --pretty=format:"%cn" "$tag")" \
    git tag -m "$(git for-each-ref --format="%(contents)" "$tag")" \
        ${tag#refs/remotes/tags/} "$tag"
done

popd > /dev/null
	
rm -f "$author_map_temp"

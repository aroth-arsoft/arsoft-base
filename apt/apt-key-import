#!/bin/bash

keyserver='hkp://keyserver.ubuntu.com'
keyid=''
keylist=''
verbose=0
update_keys=0
expired_keys=0
expire_threshold_days=0
expire_threshold_days_default=30

function usage() {
	echo "usage: apt-key-import [--keyserver keyserver] [--id keyid] [--keylist filename]"
	echo "  -h, -?, --help          shows this usage information."
	echo "  -v, --verbose           enables the verbose output."
	echo "  -u, --update            updates the keys."
	echo "  -e, --expire [days]     lists all keys which expire within the specified number of days."
	echo "                          (if not number is specified $expire_threshold_days_default is used)"
	echo "  -k, --keyserver         specifies the keyserver to for key retrieval"
	echo "  -i, --id                specifies the id of a key to import"
	echo "  -l, --keylist           specifies a file which contains a list of keys for import"
	exit 0
}

function download_key() {
	keyid="$1"
	keysource="$2"
	
	is_hkp_protocol=`echo "$keysource" | awk '/^hkp:\/\//'`
	
	if [ -z "$is_hkp_protocol" ]; then
		[ $verbose -ne 0 ] && echo "Download key from $keysource"
		gpgkey=`/usr/bin/wget -q -O - "$keysource"`
		if [ $? -eq 0 ]; then
			[ $verbose -ne 0 ] && echo "Downloaded $keysource successfully."
			gpgmsg=`echo "$gpgkey" | /usr/bin/apt-key add - 2>&1`
			if [ $? -eq 0 ]; then
				[ $verbose -ne 0 ] && echo "Added key $keyid from $keysource successfully."
				RET=0
			else
				echo "Failed to add key $keyid from $keysource error $gpgmsg" 1>&2
				RET=1
			fi
		else
			echo "Failed to download key $keyid from $keysource error $gpgkey" 1>&2
			RET=1
		fi
	else
		if [ ! -z "$SUDO_UID" ]; then
			HOME='/root'
		fi

		[ $verbose -ne 0 ] && echo "Retrieve $keyid from $keysource"
		gpgmsg=`/usr/bin/gpg -q --keyserver "$keysource" --recv-keys "$keyid" 2>&1`
		if [ $? -eq 0 ]; then
			gpgkey=`/usr/bin/gpg -q --export --armor "$keyid" 2>/dev/null`
			if [ $? -eq 0 ]; then
				[ $verbose -ne 0 ] && echo "Got $keyid from $keysource"
				gpgmsg=`echo "$gpgkey" | /usr/bin/apt-key add - 2>&1`
				if [ $? -eq 0 ]; then
					[ $verbose -ne 0 ] && echo "Added key $keyid from $keysource successfully."
					RET=0
				else
					echo "Failed to add key $keyid from $keysource: error $gpgmsg" 1>&2
					RET=1
				fi
			else
				echo "Failed to export $keyid: error $gpgkey" 1>&2
				RET=1
			fi
		else
			echo "Failed to retrieve $keyid from $keysource: error $gpgmsg" 1>&2
			RET=1
		fi
	fi
	return $RET
}

# parse command line arguments
while [ $# -ne 0 ]; do
	case "$1" in
	'-?'|'-h'|'--help') usage;; 
	'-v'|'--verbose') verbose=1; ;;
	'-u'|'--update') update_keys=1; ;;
	'-e'|'--expired') 
		expired_keys=1;
		case "$2" in
			[0-9]*)
				expire_threshold_days="$2"
				shift;
				;;
			*)
				expire_threshold_days="$expire_threshold_days_default"
				;;
		esac
		;;
	'-k'|'--keyserver') keyserver="$2"; shift ;;
	'-i'|'--id') keyid="$2"; shift ;;
	'-l'|'--keylist') keylist="$2"; shift ;;
	
	*)
		if [ -z "$keyid" ]; then
			keyid="$1"
		else
			echo "Unrecognized parameter $1" 1>&2
		fi
	;;
	esac
	shift
done

if [ -z "$keylist" ]; then
	if [ -z "$keyid" ]; then
		echo "no keyid given" 1>&2
		exit 1
	fi

	if [ -z "$keyserver" ]; then
		echo "no keyserver given" 1>&2
		exit 1
	fi
	
	present=`LANG=C /usr/bin/apt-key list | awk "/pub[ ]+[0-9]+[DR]\/$keyid/"`
	if [ -z "$present" ]; then
		download_key "$keyid" "$keyserver"
		RET=$?
	else
		RET=0
	fi
else
	if [ ! -f "$keylist" ]; then
		echo "keylist $keylist not readable." 1>&2
		exit 1
	fi
	current_list_of_keys=`LANG=C /usr/bin/apt-key list 2>/dev/null`
	
	if [ $expired_keys -ne 0 ]; then
		now=`date +%s`
		expire_threshold_seconds=$(expr $expire_threshold_days \* 86400)
		expire_time=$(expr $now + $expire_threshold_seconds)
		[ $verbose -ne 0 ] && ( echo -n "expire_time: "; echo "" | awk "{print strftime(\"%c\", $expire_time)}" )

		ERR=0
		current_keys=`echo "$current_list_of_keys" | awk "match(\\\$0, /pub[ ]+[0-9]+[DR]\/([0-9A-Fa-f]{8})/, a) { print a[1]; }" | sort -u`
		for keyid in $current_keys; do
			present=`echo "$current_list_of_keys" | awk "/pub[ ]+[0-9]+[DR]\/$keyid/" | head -n 1`
			expire_date=`echo "$present" | awk "match(\\\$0, /\[expires: ([0-9]{4}-[0-9]{2}-[0-9]{2})\]/, a) { print a[1]; }"`
			if [ ! -z "$expire_date" ]; then
				keysource=`awk -F ' ' "/^$keyid/ { print \\\$2; }" "$keylist"`
				[ -z "$keysource" ] && keysource="$keyserver"
				[ $verbose -ne 0 ] && echo "$keyid expires at $expire_date (from $keysource)"
				key_expire_date_epoch=`echo "$expire_date" | LANG=C date -f- +%s`
				if [ $key_expire_date_epoch -lt $expire_time ]; then
					echo "$keyid expires soon at $expire_date"
					if [ $update_keys -ne 0 ]; then
						[ $verbose -ne 0 ] && echo "download $keyid from $keysource."
						download_key "$keyid" "$keysource"
						if [ $? -ne 0 ]; then
							[ $verbose -ne 0 ] && echo "Failed to download key $keyid from $keysource." 1>&2
							ERR=$((ERR + 1))
						fi
					else
						ERR=$((ERR + 1))
					fi
				fi
			else
				[ $verbose -ne 0 ] && echo "$keyid does not have an expire date."
			fi
		done
		RET=$ERR
	else
		ERR=0
		declare -a fields
		while IFS=$'\t ' read -r -a fields; do
			[ ${#fields[*]} -eq 0 -o "${fields[0]:0:1}" == "#" ] && continue
			
			if [ ${#fields[*]} -lt 4 ]; then
				echo "skip unrecognized line: $fields" 1>&2
				continue
			fi
		
			keyid="${fields[0]}"
			keysource="${fields[1]}"
			ensure="${fields[2]}"
			keyname="${fields[3]}"
			
			present=`echo "$current_list_of_keys" | awk "/pub[ ]+[0-9]+[DR]\/$keyid/"`
			if [ -z "$present" ]; then
				[ $verbose -ne 0 ] && echo "$keyid not found. key source $keysource." 1>&2
				download_key "$keyid" "$keysource"
				if [ $? -ne 0 ]; then
					[ $verbose -ne 0 ] && echo "Failed to download key $keyid from $keysource." 1>&2
					ERR=$((ERR + 1))
				fi
			else
				[ $verbose -ne 0 ] && echo "$keyid already available."
			fi
		done < "$keylist"
		RET=$ERR
	fi
fi
[ $verbose -ne 0 ] && echo "$0 exit with $RET"
exit $RET

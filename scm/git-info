#!/bin/bash
 
# author: Duane Johnson
# email: duane.johnson@gmail.com
# date: 2008 Jun 12
# license: MIT
#
# Based on discussion at http://kerneltrap.org/mailarchive/git/2007/11/12/406496

repo_git=''

function usage()
{
    echo "git-info <gitrepo>"
    echo "    -h, --help         shows this help screen"
    echo "    -v, --verbose      enable verbose output"
    exit 0
}

# Shows you the largest objects in your repo's pack file.
# Written for osx.
#
# @see http://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/
# @author Antony Stubbs

# set the internal field spereator to line break, so that we can iterate easily over the verify-pack output
function largest_objects() {
	local max_objects="$1"
	IFS=$'\n';

	# list all objects including their size, sort by size, take top 10
	if [ -d .git ]; then
		objects=`LANG=C git verify-pack -v .git/objects/pack/pack-*.idx | grep -v chain | sort -k3nr | head -n $max_objects`
	elif [ -d objects/pack ]; then
		objects=`LANG=C git verify-pack -v objects/pack/pack-*.idx | grep -v chain | sort -k3nr | head -n $max_objects`
	else
		objects=''
	fi

	if [ ! -z "$objects" ]; then
		echo "All sizes are in kB's. The pack column is the size of the object, compressed, inside the pack file."
		echo "$objects"
		all_objects_rev_list=`LANG=C git rev-list --all --objects`
		output="size,pack,SHA,location"
		for y in $objects
		do
			# extract the size in bytes
			size=$((`echo $y | cut -f 5 -d ' '`/1024))
			# extract the compressed size in bytes
			compressedSize=$((`echo $y | cut -f 6 -d ' '`/1024))
			# extract the SHA
			sha=`echo $y | cut -f 1 -d ' '`
			# find the objects location in the repository tree
			location=`echo "$all_objects_rev_list" | grep $sha`
			#lineBreak=`echo -e "\n"`
			output="${output}\n${size},${compressedSize},${location}"
		done
	else
		$output=''
	fi

	echo -e $output | column -t -s ', '
}

# parse command line arguments
while [ $# -ne 0 ]; do
    case "$1" in
		'-?'|'-h'|'--help') usage;;
		'-v'|'--verbose') verbose=1; ;;
        *)
			if [ -z "$repo_git" ]; then
				repo_git="$1"
			else
				echo "repository already specified." >&2
				exit 1
			fi
            ;;
    esac
    shift
done

if [ -z "$repo_git" ]; then
	repo_git=`readlink -f '.'`
else
	repo_git=`readlink -f "$repo_git"`
fi

pushd "$repo_git" >/dev/null
 
# Find base of git directory
while [ ! -d .git ] && [ ! -f packed-refs ] && [ ! `pwd` = "/" ]; do cd ..; done
 
# Show various information about this git directory
if [ -d .git -o -f packed-refs ]; then
	echo "== Remote URL:"
	git remote -v
	echo

	echo "== Remote Branches: "
	git branch -r
	echo

	echo "== Local Branches:"
	git branch
	echo

	if [ -f .git/config ]; then 
		echo "== Configuration (.git/config)"
		cat .git/config
		echo
	else
		echo "== Configuration (config)"
		cat config
		echo
	fi
	
	echo "== Largest objects"
	largest_objects 10
	echo
 
	echo "== Most Recent Commit"
	git --no-pager log --max-count=1
	echo

	echo "Type 'git log' for more commits, or 'git show' for full commit details."
else
	echo "Not a git repository."
fi
 
popd >/dev/null 

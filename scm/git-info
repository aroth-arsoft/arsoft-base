#!/bin/bash
 
# author: Duane Johnson
# email: duane.johnson@gmail.com
# date: 2008 Jun 12
# license: MIT
#
# Based on discussion at http://kerneltrap.org/mailarchive/git/2007/11/12/406496

repo_git=''
verbose=0
recursive=0
only_branch_info=0
num_large_objects=10
num_recent_commits=1
show_config=0
display_name=''

function usage()
{
    echo "git-info <gitrepo>"
    echo "    -h, --help                 shows this help screen"
    echo "    -v, --verbose              enable verbose output"
    echo "    -r, --recurse-submodules   shows repository information for each submodule"
    echo "    --branches                 only show the branches information"
    echo "    --config                   displays the repository configuration"
	echo "    --num-large <num>          number of large objects (default: $num_large_objects)"
	echo "    --num-commits <num>        number of recent commits (default: $num_recent_commits)"
	echo "    --name <name>              use the given string as display name"
    exit 0
}

# Shows you the largest objects in your repo's pack file.
# Written for osx.
#
# @see http://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/
# @author Antony Stubbs

# set the internal field spereator to line break, so that we can iterate easily over the verify-pack output
function largest_objects() {
	local magicdir="$1"
	local max_objects="$2"

    local all_objects_list_file=`mktemp`
    local all_objects_rev_list_file=`mktemp`
	# list all objects including their size, sort by size, take top 10
	if [ -d "$magicdir/objects/pack" ]; then
		LANG=C git verify-pack -v $magicdir/objects/pack/pack-*.idx | grep -v chain | sort -k3nr | head -n $max_objects > "$all_objects_list_file"
        LANG=C git rev-list --all --objects > "$all_objects_rev_list_file"
	fi

    local output='size,pack,type,SHA,location'
    while IFS=$'\n' read -r line; do
        declare -a fields
        IFS=$' ' read -r -a fields <<< "$line"
        #echo "${#fields[*]}=${fields[@]}"
        # git verify-pack -v returns the following fields:
        #   SHA1 type size size-in-pack-file offset-in-packfile
        # or the following for deleted objects:
        #   SHA1 type size size-in-packfile offset-in-packfile depth base-SHA1
        # extract the SHA
        sha=${fields[0]}
        # exttract the object type (commit, tree, blob, etc)
        object_type=${fields[1]}
        # extract the size in bytes
        [ ${#fields[*]} -gt 2 ] && size=$((${fields[2]} / 1024)) || size=0
        # extract the compressed size in bytes
        [ ${#fields[*]} -gt 3 ] && compressedSize=$((${fields[3]} /1024)) || compressedSize=0
        # find the objects location in the repository tree
        location=`awk "/$sha/ { print \\\$2 }" "$all_objects_rev_list_file"`

        output="${output}\n${size},${compressedSize},${object_type},${sha},${location}"

    done < "$all_objects_list_file"
    rm -f "$all_objects_rev_list_file"
    rm -f "$all_objects_list_file"

	echo -e $output | column -t -s ', '
}

function git_get_magic_dir() {
	local repo_dir="$1"
	local RES=0
	if [ -f "$repo_dir/packed-refs" ]; then
		# repo without working directory (bare)
		magicdir="$repo_dir"
	elif [ -d "$repo_dir/.git" ]; then
		# regular repo with working directory
		magicdir="$repo_dir/.git"
	elif [ -f "$repo_dir/.git" ]; then
		# submodule within a working directory
		magicdir=`cat "$repo_dir/.git"`
		magicdir=${magicdir#gitdir: }
	else
		# invalid repo directory
		magicdir=''
		RES=1
	fi
	echo "$magicdir"
	return $RES
}

script_options=''
# parse command line arguments
while [ $# -ne 0 ]; do
    case "$1" in
		'-?'|'-h'|'--help') usage;;
		'-v'|'--verbose') verbose=1; script_options="$script_options $1"; ;;
		'-r'|'--recurse-submodules') recursive=1; ;;
		'--config') show_config=1; script_options="$script_options $1"; ;;
		'--num-large') num_large_objects=$2; script_options="$script_options $1 $2"; shift; ;;
		'--num-commits') num_recent_commits=$2; script_options="$script_options $1 $2"; shift; ;;
		'--branches') only_branch_info=1; script_options="$script_options $1"; ;;
		'--name') display_name="$2"; shift;;
        *)
			if [ -z "$repo_git" ]; then
				if [ ! -d "$1" ]; then
					echo "Invalid directory $1 specified." >&2
					exit 1
				else
					repo_git="$1"
				fi
			else
				echo "repository already specified." >&2
				exit 1
			fi
            ;;
    esac
    shift
done

if [ -z "$repo_git" ]; then
	repo_git=`readlink -f '.'`
else
	repo_git=`readlink -f "$repo_git"`
fi

script_file=`readlink -f "$0"`
script_dir=`dirname "$script_file"`
script_name=`basename "$script_file"`

pushd "$repo_git" >/dev/null
 
# Find base of git directory
while [ ! -d .git ] && [ ! -f .git ] && [ ! -f packed-refs ] && [ ! `pwd` = "/" ]; do cd ..; done

# Show various information about this git directory
if [ -d .git -o -f .git -o -f packed-refs ]; then
	if [ -f packed-refs ]; then
		magicdir='.'
		repo_is_bare=1
		repo_is_submodule=0
	elif [ -d .git ]; then
		magicdir='.git'
		repo_is_bare=0
		repo_is_submodule=0
	else
		magicdir=`cat .git`
		magicdir=${magicdir#gitdir: }
		repo_is_bare=0
		repo_is_submodule=1
	fi
	
	actual_repo_git=`readlink -f '.'`
	magicdir=`readlink -f "$actual_repo_git/$magicdir"`
	[ -z "$display_name" ] && display_name=`basename "$actual_repo_git"`
	
	if [ $repo_is_bare -ne 0 ]; then
		echo "== $display_name GIT Repository $actual_repo_git (bare)"
	elif [ $repo_is_submodule -ne 0 ]; then
		echo "== $display_name GIT Repository $actual_repo_git (submodule)"
	else
		echo "== $display_name GIT Repository $actual_repo_git"
	fi
	echo "  Magic dir: $magicdir"
	echo

	if [ $only_branch_info -eq 0 ]; then
		echo "== $display_name remote URLs:"
		git remote -v
		echo
	fi

	echo "== $display_name Remote Branches: "
	git branch -r
	echo

	echo "== $display_name Local Branches:"
	git branch
	echo

	if [ $only_branch_info -eq 0 ]; then
		if [ $show_config -ne 0 ]; then
			echo "== $display_name Repository configuration ($magicdir/config)"
			cat $magicdir/config
			echo
		fi
		
		if [ $num_large_objects -gt 0 ]; then
			echo "== $display_name $num_large_objects largest objects (sizes in kB)"
			largest_objects "$magicdir" $num_large_objects
			echo
		fi
	
		if [ $num_recent_commits -gt 0 ]; then
			echo "== $display_name $num_recent_commits most recent commits"
			git --no-pager log --max-count=$num_recent_commits
			echo
		fi
	fi

	if [ $repo_is_bare -eq 0 ]; then
		all_submodule=`git submodule status`
		if [ ! -z "$all_submodule" ]; then
			echo "== $display_name Submodules:"
			echo "$all_submodule"
			echo
			
			if [ $recursive -ne 0 ]; then
				submodule_cmdline="$script_file --recurse-submodules $script_options --name "$display_name/\$name" \"$actual_repo_git/\$path\""
				git submodule foreach --quiet "$submodule_cmdline"
			fi
		fi
	fi

else
	echo "Not a git repository."
fi
 
popd >/dev/null 

#!/bin/bash

verbose=0
clone_bare=1
repo_git=''
subdir_list=''
outdir=''
submodule_base_url=''
force=0
config_file=''
subdir_num=0
declare -a subdir_array
declare -a subdir_name_array
declare -a subdir_repo_array
declare -a subdir_repo_public_array

function usage()
{
    echo "git-subdir2submodule <gitrepo> <subdir0> [subdir1]"
    echo "    -h, --help         shows this help screen"
    echo "    -v, --verbose      enable verbose output"
    echo "    -f, --force        override existing git repository. can be dangerous!"
    echo "    -o <dir>           specifies the output directory"
    echo "    -s <base_url>      override the base url for submodules."
    echo "    --file <path>      text file which contains the submodule specifications."
    exit 0
}

function verbose_exec()
{
    [ $verbose -ne 0 ] && echo "$@"
    "$@"
}

function cleanup_repo()
{
	true
}

function subdir_to_submodule()
{
	local repodir="$1"
	local subdir="$2"
	local destdir="$3"
	local public_url="$4"
	if [ -d "$destdir" ]; then
		if [ $force -eq 0 ]; then
			echo "Target directory already exists $destdir." >&2
			return 1
		else
			echo "Target directory already exists $destdir. Remove it and continue" >&2
			rm -rf "$destdir"
		fi
	fi

	[ $clone_bare -ne 0 ] && bare_opt='--bare' || bare_opt=''

	subdir_git_dir=`mktemp -d "$destdir.XXXXXX"`
	pushd "$subdir_git_dir" > /dev/null
	git clone --no-hardlinks $bare_opt "$repodir" "$subdir_git_dir"; RES=$?
	if [ $RES -eq 0 ]; then
		git filter-branch --subdirectory-filter "$subdir" HEAD -- --all; RES=$?
		if [ $RES -eq 0 ]; then
			if [ $clone_bare -eq 0 ]; then
				git reset --hard; RES=$?
			fi
			if [ $RES -eq 0 ]; then
				git gc --aggressive; RES=$?
				if [ $RES -eq 0 ]; then
					git prune; RES=$?
					if [ $RES -eq 0 ]; then
						git remote rm origin; RES=$?
						if [ $RES -eq 0 ]; then
							git remote add origin "$public_url"; RES=$?
							if [ $RES -eq 0 ]; then
								echo "Subdirectory successfully converted into $subdir_git_dir."
							else
								echo "Failed to add remote origin $public_url for GIT repository $subdir_git_dir." >&2
							fi
						else
							echo "Failed to remove remote origin from GIT repository $subdir_git_dir." >&2
						fi
					else
						echo "Failed to prune GIT repository $subdir_git_dir." >&2
					fi
				else
					echo "Garbage collection in GIT repository $subdir_git_dir failed." >&2
				fi
			else
				echo "Reset the GIT repository $subdir_git_dir failed." >&2
			fi
		else
			echo "Filter branch to GIT repository $subdir_git_dir failed" >&2
		fi
	else
		echo "Failed to clone GIT repository $repodir to $subdir_git_dir" >&2
	fi

	popd > /dev/null
	
	if [ $RES -eq 0 ]; then
		mv "$subdir_git_dir" "$destdir"; RES=$?
	else
		# remove the temporary clone of GIT repo
		rm -rf "$repo_git_full"
	fi
	return $RES
}

function fully_remove_subdir()
{
	local repodir="$1"
	local subdir="$2"
	pushd "$repodir" > /dev/null

	#git filter-branch --tree-filter 'git rm -r -f --ignore-unmatch *.pyc' HEAD
	git filter-branch --index-filter "git rm -rf --cached --ignore-unmatch $subdir" HEAD; RES=$?
	if [ $RES -eq 0 ]; then
		git reflog expire --all; RES=$?
		if [ $RES -eq 0 ]; then
			git gc --aggressive --prune; RES=$?
			if [ $RES -eq 0 ]; then
				echo "Successfully remove $subdir from GIT repository $repodir"
			else
				echo "Garbage collection in GIT repository $repodir failed." >&2
			fi
		else
			echo "Failed to expire reflog information in GIT repository $repodir." >&2
		fi
	else
		echo "Failed to filter subdirectory $subdir from GIT repository $repodir." >&2
	fi
	
	if [ $RES -eq 0 ]; then
		# remove the subdirectory if it still exists
		[ -d "$repodir/$subdir" ] && rm -rf "$repodir/$subdir"
	fi
	
	popd > /dev/null
	return $RES
}

function add_submodule()
{
	local repodir="$1"
	local subdir="$2"
	local submodule="$3"
	
	pushd "$repodir" > /dev/null

	git submodule add "$submodule" "$subdir"; RES=$?
	if [ $RES -eq 0 ]; then
		# stash the modified .gitmodules
		git add "${repodir}/.gitmodules"; RES=$?
		if [ $RES -eq 0 ]; then
			echo "Submodule $submodule as $subdir successfully added."
		else
			echo "Failed to add ${repodir}/.gitmodules" >&2
		fi
	else
		echo "Failed to add submodule $subdir as $submodule." >&2
	fi

	popd > /dev/null
	return $RES
}

# parse command line arguments
while [ $# -ne 0 ]; do
    case "$1" in
		'-?'|'-h'|'--help') usage;;
		'-v'|'--verbose') verbose=1; ;;
		'-f'|'--force') force=1; ;;
		'-o') outdir="$2"; shift; ;;
		'-s') submodule_base_url="$2"; shift; ;;
		'--file') config_file="$2"; shift; ;;
        *)
			if [ -z "$repo_git" ]; then
				repo_git="$1"
			else
				[ -z "$subdir_list" ] && subdir_list="$1" || subdir_list="$subdir_list $1"
			fi
            ;;
    esac
    shift
done

script_file=`readlink -f "$0"`
script_dir=`dirname "$script_file"`
script_name=`basename "$script_file"`

if [ ! -x "/usr/bin/git" ]; then
	echo "GIT not installed. Please install using 'sudo apt-get install git-core'." >&2
	exit 1
fi

if [ -z "$repo_git" ]; then
	echo "No GIT repository specified." >&2
	exit 1
else
	if [ -d "$repo_git" ]; then
		repo_git=`readlink -f "$repo_git"`
	else
		echo "Only local GIT repositories are supported." >&2
		exit 1
	fi
fi

[ -z "$outdir" ] && outdir=`dirname "$repo_git"`
[ -z "$submodule_base_url" ] && submodule_base_url=`dirname "$repo_git"`

if [ ! -z "$config_file" ]; then
	subdir_num=0
	declare -a fields
	while IFS=$'\t ' read -r -a fields; do
		[ ${#fields[*]} -eq 0 -o "${fields[0]:0:1}" == "#" ] && continue
		
		if [ ${#fields[*]} -lt 3 ]; then
			echo "skip unrecognized line: $fields" 1>&2
			continue
		fi

		subdir="${fields[0]}"
		subdir_name="${fields[1]}"
		subdir_repo_public="${fields[2]}"
		
		subdir_safe=${subdir_name//\//_}
		subdir_git_dir="$outdir/${subdir_safe}.git"

		subdir_array[$subdir_num]="$subdir"
		subdir_name_array[$subdir_num]="$subdir_name"
		subdir_repo_array[$subdir_num]="$subdir_git_dir"
		subdir_repo_public_array[$subdir_num]="$subdir_repo_public"
		let subdir_num++
	done < "$config_file"

	if [ $subdir_num -eq 0  ]; then
		echo "No subdirectory is loaded from $config_file." >&2
		exit 1
	fi
else
	if [ -z "$subdir_list" ]; then
		echo "No subdirectory in GIT repository specified." >&2
		exit 1
	else
		subdir_num=0
		for subdir in $subdir_list; do
			subdir_safe=${subdir//\//_}
			subdir_git_dir="$outdir/${subdir_safe}.git"
		
			subdir_array[$subdir_num]="$subdir"
			subdir_name_array[$subdir_num]="$subdir_safe"
			subdir_repo_array[$subdir_num]="$subdir_git_dir"
			subdir_repo_public_array[$subdir_num]="$subdir_git_dir"
			let subdir_num++
		done
	fi

fi

repo_name=`basename "$repo_git"`

echo "GIT repository: $repo_git"
echo "GIT repository name: $repo_name"
echo "Output directory: $outdir"
echo "Subdirectory list: $subdir_list"
echo "Submodule base url: $submodule_base_url"

if [ $verbose -ne 0 ]; then
	for ((idx=0; idx < $subdir_num ; idx++)); do
		subdir=${subdir_array[$idx]}
		subdir_name=${subdir_name_array[$idx]}
		subdir_repo=${subdir_repo_array[$idx]}
		subdir_repo_public=${subdir_repo_public_array[$idx]}
		echo "subdir: $subdir"
		echo "subdir name: $subdir_name"
		echo "subdir repo: $subdir_repo"
		echo "subdir repo public: $subdir_repo_public"
	done
fi

cloned_git_dir="$outdir/${repo_name}.git"
temp_git_dir=`mktemp -d "$cloned_git_dir.XXXXXX"`

git clone --no-hardlinks "$repo_git" "$temp_git_dir"; RES=$?
if [ $RES -eq 0 ]; then
	# enter the cloned GIT repository
	pushd "$temp_git_dir" > /dev/null

	# create extra GIT repositories for each subdir
	for ((idx=0; idx < $subdir_num ; idx++)); do
		subdir=${subdir_array[$idx]}
		subdir_name=${subdir_name_array[$idx]}
		subdir_repo=${subdir_repo_array[$idx]}
		subdir_repo_public=${subdir_repo_public_array[$idx]}

		subdir_to_submodule "$temp_git_dir" "$subdir" "$subdir_repo" "$subdir_repo_public"; RES=$?
		if [ $RES -eq 0 ]; then
			echo "GIT repository for $subdir successfully created."
		else
			echo "Failed to convert subdirectory $subdir." >&2
			break;
		fi
	done
	
	if [ $RES -eq 0 ]; then
		# remove the subdirs from the cloned GIT repository
		for ((idx=0; idx < $subdir_num ; idx++)); do
			subdir=${subdir_array[$idx]}

			fully_remove_subdir "$temp_git_dir" "$subdir"; RES=$?
			if [ $RES -eq 0 ]; then
				echo "Subdirectory $subdir successfully removed."
			else
				echo "Failed to convert subdirectory $subdir." >&2
				break;
			fi
		done
	fi

	if [ $RES -eq 0 ]; then
		# re-add the subdirs as submodules from the cloned GIT repository
		for ((idx=0; idx < $subdir_num ; idx++)); do
			subdir=${subdir_array[$idx]}
			subdir_name=${subdir_name_array[$idx]}
			subdir_repo_public=${subdir_repo_public_array[$idx]}

			add_submodule "$temp_git_dir" "$subdir" "$subdir_repo_public"; RES=$?
			if [ $RES -eq 0 ]; then
				echo "Submodule $subdir successfully added."
			else
				echo "Failed to add submodule $subdir as $subdir_repo_public." >&2
				break;
			fi
		done
	fi
	
	if [ $RES -eq 0 ]; then
		git submodule init; RES=$?
		if [ $RES -eq 0 ]; then
			git submodule update; RES=$?
			if [ $RES -eq 0 ]; then
				commit_msg_file=`mktemp`
				echo "$script_name converted the following subdirectories into submodules:" >> "$commit_msg_file"
				for ((idx=0; idx < $subdir_num ; idx++)); do
					subdir=${subdir_array[$idx]}
					subdir_name=${subdir_name_array[$idx]}
					subdir_repo_public=${subdir_repo_public_array[$idx]}
					echo "  $subdir -> $subdir_repo_public" >> "$commit_msg_file"
				done
				git commit -F "$commit_msg_file"; RES=$?
				rm "$commit_msg_file"
				if [ $RES -eq 0 ]; then
					echo "Submodule modifications commited."
				else
					echo "Failed to commit submodule modifications." >&2
				fi
			else
				echo "Failed to update submodules." >&2
			fi
		else
			echo "Failed to initialize submodules." >&2
		fi
	fi
	
	# leave the cloned GIT repository
	popd > /dev/null
	
	if [ $RES -eq 0 ]; then
		mv "$temp_git_dir" "$cloned_git_dir"; RES=$?
		if [ $RES -eq 0 ]; then
			echo "Conversion completed successfully."
			echo "Main repository is available at $cloned_git_dir"
			echo "Repositories for subdirectories:"
			show_todo=0
			for ((idx=0; idx < $subdir_num ; idx++)); do
				subdir=${subdir_array[$idx]}
				subdir_name=${subdir_name_array[$idx]}
				subdir_repo=${subdir_repo_array[$idx]}
				subdir_repo_public=${subdir_repo_public_array[$idx]}
				if [ "$subdir_repo_public" != "$subdir_repo" ]; then
					echo "  $subdir_repo (as $subdir_repo_public)"
					show_todo=1
				else
					echo "  $subdir_repo"
				fi
			done
			
			if [ $show_todo -ne 0 ]; then
				echo "Further steps required:"
				for ((idx=0; idx < $subdir_num ; idx++)); do
					subdir=${subdir_array[$idx]}
					subdir_name=${subdir_name_array[$idx]}
					subdir_repo=${subdir_repo_array[$idx]}
					subdir_repo_public=${subdir_repo_public_array[$idx]}
					if [ "$subdir_repo_public" != "$subdir_repo" ]; then
						echo " - copy $subdir_repo to $subdir_repo_public"
					fi
				done
			fi
		else
			echo "Failed to move temporary GIT repository $temp_git_dir to $cloned_git_dir." >&2
		fi
	else
		echo "Conversion failed; remove temporary GIT repository at $temp_git_dir."
		# remove the temporary clone of GIT repo
		rm -rf "$temp_git_dir"
	fi
else
	echo "Failed to clone GIT repository $repodir to $subdir_git_dir" >&2
fi

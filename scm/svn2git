#!/bin/bash

verbose=0
repo_svn=''
repo_git=''
mail_domain=''
authors_file=''
update_authors_file=0
rootistrunk=0

function usage()
{
    echo "svn2git <svnrepo> <gitrepo>"
    echo "    -h, --help      shows this help screen"
    echo "    -v, --verbose   enable verbose output"
    echo "    --domain        specifies the domain for the users"
    exit 0
}

function verbose_exec()
{
    [ $verbose -ne 0 ] && echo "$@"
    "$@"
}

function convert_using_ruby_svn2git() {

	repo_git_full=`mktemp -d "$repo_git.XXXXXX"`
	pushd "$repo_git_full" > /dev/null
	
	svn2git_opts=''
	[ $rootistrunk -ne 0 ] && svn2git_opts="$svn2git_opts --rootistrunk"
	[ $verbose -ne 0 ] && svn2git_opts="$svn2git_opts --verbose"

	echo "Convert the SVN repository into GIT..."
	/usr/local/bin/svn2git "$repo_svn" $svn2git_opts --authors "$authors_file"
	if [ $? -eq 0 ]; then
		echo "SVN import successful."
	else
		echo "SVN import with errors."
	fi
	popd > /dev/null
	
	echo "Convert temporary GIT repository into bare GIT repository..."
	pushd "$repo_git" > /dev/null
	git clone --bare "$repo_git_full" "$repo_git"
	if [ $? -eq 0 ]; then
		# set some basic configuration properties
		git config core.sharedrepository 1
		git config receive.denyNonFastforwards true
		# The core.sharedrepository flag tells git to keep everything group readable and writable.
		# The receive.denyNonFastforwards flag makes sure that merges can't happen when you push to 
		# the repo. You have to do the merges on your local machine, and then push the result.

		# Make sure permissions are set properly
		# find "$repo_git/objects" -type d -exec chmod 02770 {} \;

		echo "Conversion completed successfully."
	else
		echo "Conversion completed with errors."
	fi
	popd > /dev/null
	
	# remove the temporary directory with the full GIT repo
	rm -rf "$repo_git_full"
}

function convert_using_git_svn() {
	pushd "$repo_git" > /dev/null
	echo "Cloning the SVN repository into GIT..."
	git svn clone -A "$author_map_temp" --no-metadata --preserve-empty-dirs -s "$repo_svn" 

	echo "Fetching the SVN repository..."
	git svn fetch

	echo "Removing useless commits..."
	git filter-branch --prune-empty --tag-name-filter cat -- --all

	echo "Changing tagging commits to tags..."
	git for-each-ref --format="%(refname)" refs/remotes/tags/ |
	while read tag; do
		GIT_COMMITTER_DATE="$(git log -1 --pretty=format:"%ad" "$tag")" \
		GIT_COMMITTER_EMAIL="$(git log -1 --pretty=format:"%ce" "$tag")" \
		GIT_COMMITTER_NAME="$(git log -1 --pretty=format:"%cn" "$tag")" \
		git tag -m "$(git for-each-ref --format="%(contents)" "$tag")" \
			${tag#refs/remotes/tags/} "$tag"
	done

	popd > /dev/null
}

# parse command line arguments
while [ $# -ne 0 ]; do
    case "$1" in
        "-?") usage;;
        "-h") usage;;
        "--help") usage;;
        "--domain") mail_domain="$2"; shift; ;;
        '-v'|'--verbose') verbose=1; ;;
        "--authors") authors_file="$2"; shift; ;;
        "--update-authors") update_authors_file=1; ;;
        '--rootistrunk') rootistrunk=1; ;;
        *)
            if [ -z "$repo_svn" ]; then
                repo_svn="$1"
            elif [ -z "$repo_git" ]; then
                repo_git="$1"
            else
                echo "Both repositories has alreayd been specified (svn: $repo_svn, git: $repo_git)."
                exit 1
            fi
            ;;
    esac
    shift
done

if [ ! -x "/usr/local/bin/svn2git" ]; then
	echo "svn2git ruby script not installed. Please install using 'sudo gem install svn2git'."
	exit 1
fi

if [ -z "$repo_svn" ]; then
	echo "No SVN source repository specified."
	exit 1
elif [ -d "$repo_svn" ]; then
	repo_svn="file://$repo_svn"
	echo "Local SVN repository specified. Using URL $repo_svn"
fi

if [ -z "$repo_git" ]; then
	echo "No GIT target repository specified."
	exit 1
fi

script_file=`readlink -f "$0"`
script_dir=`dirname "$script_file"`

[ ! -d "$repo_git" ] && mkdir -p "$repo_git"

repo_name=`basename "$repo_svn"`
echo "Repository name: $repo_name"

[ -z "$mail_domain" ] && mail_domain=`dnsdomainname`
if [ -z "$authors_file" ]; then
	if [ -f "$HOME/.svn2git/authors_$repo_name" -a $update_authors_file -eq 0 ]; then
		authors_file="$HOME/.svn2git/authors_$repo_name"
	else
		author_map_temp=`mktemp /tmp/svn2git.XXXXXX`
		echo "Gathering information about authors from $repo_svn..."
		svn log "$repo_svn" |\
			awk -F '|' "/r[0-9]+/ { sub(/^[ ]+/, \"\", \$2); sub(/[ ]+$/, \"\", \$2); org=\$2; sub(/@.*/, \"\", \$2); print org \" = \" \$2 \" <\" \$2 \"@$mail_domain>\"; }" |\
			sort -u > "$author_map_temp"
		cp "$author_map_temp" "$HOME/.svn2git/authors_$repo_name"
		authors_file="$HOME/.svn2git/authors_$repo_name"
		rm -f "$author_map_temp"
	fi
fi
echo "Author map: $authors_file"

convert_using_ruby_svn2git

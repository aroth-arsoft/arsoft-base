#!/bin/bash

# Copyright (c) 2014 Andreas Roth. All rights reserved.
#
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Copyright (C) 2010 Free Software Foundation, Inc.
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is a modification of gdb-add-index that recursively adds an index
# to the shared libraries dependencies from the same build.
# Script also supports to take multiple target files.

SCRIPTFILE=`readlink -f "$0"`
SCRIPTNAME=`basename "$SCRIPTFILE"`
SCRIPTDIR=`dirname "$SCRIPTFILE"`

verbose=0
targets=''
library_directories=''
libdir_candidates="lib lib/$(uname -m)-gnu-linux"

function usage() {
	echo "Usage: $SCRIPTNAME [OPTIONS] <target_file>"
	echo "  Adds index the gdb-index section to the given target files."
	echo "OPTIONS:"
	echo "    -h, --help            shows this help"
	echo "    -v, --verbose         enable verbose output"
	echo "    -L <libdir>           add an additional library search directory"
	echo "NOTES:"
	echo "  This script automatically tries to find the library directories"
	echo "  for target files. If a target is inside a 'bin' directory, the script"
	echo "  tries the following library directories as well:"
	for l in $libdir_candidates; do
		echo "    '$l'"
	done

	exit 0
}

# This function is basically the RedHat's gdb-add-index script and is why
# we have the FSF copyright above.
function index_one_file {
  local file="$1"
  local dir="${file%/*}"

  # We don't care if gdb gives an error.
  gdb -nx --batch-silent -ex "file $file" -ex "save gdb-index $dir"

  if test -f "${file}.gdb-index"; then
    objcopy --add-section .gdb_index="${file}.gdb-index" --set-section-flags \
        .gdb_index=readonly "$file" "$file"
    rm -f "${file}.gdb-index"
  fi
}

function maybe_index {
	readelf -e "$1" | grep '.gdb_index' > /dev/null 2>&1
	if [[ "$?" != 0 ]]; then
		if [ ! -w "$1" ]; then
			echo "Skipping $1 (not writable)"
		else
			echo "Adding .gdb_index to $1"
			index_one_file "$1"
		fi
	else
		echo "Skipping $1 (already has .gdb_index)"
	fi
}

function process_target {

	local target=`readlink -f "$1"`
	local target_dir="${target%/*}"
	local target_dir_base=`basename "$target_dir"`
	local target_lib_dirs="$library_directories"

	if [ "$target_dir_base" == 'bin' ]; then
		[ -z "$target_lib_dirs" ] && target_lib_dirs="$target_dir"

		for l in $libdir_candidates; do
			if [ -d "$target_dir/../$l" ]; then
				libdir=`readlink -f "$target_dir/../$l"`
				#[ $verbose -ne 0 ] && echo "found dir $libdir"
				target_lib_dirs="$target_lib_dirs|$libdir"
			fi
		done
	fi

	if [ -z "$target_lib_dirs" ]; then
		target_lib_dirs="$target_dir"
	else
		target_lib_dirs="($target_dir|$target_lib_dirs)"
	fi

	[ $verbose -ne 0 ] && echo "Process target $target"
	[ $verbose -ne 0 ] && echo "Library directories: $target_lib_dirs"
	OLDIFS=$IFS
	IFS=$'\n'

	local shared_libraries=$(
		ldd -d "$target" | grep -P "$target_lib_dirs" | cut -d '>' -f2 | cut -d ' ' -f2
		)
	[ $verbose -ne 0 ] && echo "Shared libraries: $shared_libraries"

	maybe_index "$target"
	for lib in $shared_libraries; do
        local l=`readlink -f "$lib"`
		maybe_index "$l"
	done
}

# parse command line arguments
while [ $# -ne 0 ]; do
	case "$1" in
	'-?'|'-h'|'--help') usage;;
	'-v'|'--verbose') verbose=1; ;;
	'-L')
		dir=`readlink -f "$2"`
		if [ ! -d "$dir" ]; then
			echo "Given library directory $dir is not a directory." >&2
			exit 2
		fi
		if [ -z "$library_directories" ]; then
			library_directories="$dir"
		else
			library_directories="$library_directories|$dir"
		fi
		shift;
		;;
	-*)
		echo "Unrecognized option $1" >&2
		exit 1
		;;
	*)
		if [ -z "$targets" ]; then
			targets="$1"
		else
			targets="$targets $1"
		fi
		;;
	esac
	shift
done

if [ -z "$targets" ]; then
	echo "No target files given." >&2
fi

for t in $targets; do
	process_target "$t"
done

#!/bin/bash
# Build and publish Ubuntu/Debian source packages for several releases
# without manually editing debian/changelog each time
#
# Original written by TJ <ubuntu@tjworld.net> July 2008
# http://tjworld.net/attachment/wiki/Linux/Ubuntu/Packages/PPAPublishMultipleReleases/ppa_publish
#
# Enhancements by <aroth@arsoft-online.com> May 2012
#  - improved command line parsing
#  - dput target is now optional, using default from ~/.dput.cf
#  - check the given releases against the current ubuntu releases

SCRIPTFILE=`readlink -f "$0"`
SCRIPTNAME=`basename "$SCRIPTFILE"`
SCRIPTDIR=`dirname "$SCRIPTFILE"`
DPUT_TARGET=''
RELEASES=''
PKG=''
DEFAULT_RELEASES=`lsb_release -cs`
declare -A VALID_RELEASE=(
["hardy"]="8.04"
["intrepid"]="8.10"
["jaunty"]="9.04"
["lucid"]="9.10"
["karmic"]="10.04"
["maverick"]="10.10"
["natty"]="11.04"
["oneiric"]="11.10"
["precise"]="12.04"
["quantal"]="12.10"
["raring"]="13.04"
["saucy"]="13.10"
["trusty"]="14.04"
["utopic"]="14.10"
["vivid"]="15.04"
)
noput=0
noorig=0
verbose=0

if [ -f $HOME/.arsoft/ppa_publish.conf ]; then
	source $HOME/.arsoft/ppa_publish.conf
fi

if [ -z "$DPUT_TARGET" ]; then
	if [ -f "$HOME/.dput.cf" ]; then
		DPUT_TARGET=`awk -F '=' '/^default_host_main[[:space:]]*=[[:space:]]*.*$/ { gsub(/^[[:space:]]*/,"",$2); print $2 }' "$HOME/.dput.cf"`
	fi
fi

function usage() {
	echo "Usage: $SCRIPTNAME [OPTIONS] [RELEASE]"
	echo "  Edits the changelog before calling debuild and dput to publish"
	echo "  the source package to the buildd system for each release"
	echo "  Run from the package source directory"
	echo "OPTIONS:"
	echo "    -h, --help            shows this help"
	echo "    -v, --verbose         enable verbose output"
	echo "    --ppa name            specifies the target PPA (alias for --target ppa:name)"
	echo "    --target name         specifies the target for dput"
	echo "    --noput               do not upload the package"
	echo "    --noorig              do not upload the original tarball"
	echo "RELEASE:"
	for rel in ${!VALID_RELEASE[@]}; do
		if $(echo $DEFAULT_RELEASES} | grep -q $rel); then
			echo "    $rel (default)"
		else
			echo "    $rel"
		fi
	done
	if [ -z "$DPUT_TARGET" ]; then
		echo "Default target: (none)"
	else
		echo "Default target: $DPUT_TARGET"
	fi
	
	if [ -f $HOME/.arsoft/ppa_publish.conf ]; then
		echo "Configuration file: $HOME/.arsoft/ppa_publish.conf"
	else
		echo "Configuration file: $HOME/.arsoft/ppa_publish.conf (does not exist)"
	fi
	exit 0
}

# parse command line arguments
while [ $# -ne 0 ]; do
	case "$1" in
	'-?'|'-h'|'--help') usage;;
	'-v'|'--verbose') verbose=1; ;;
	'--target') DPUT_TARGET="$2"; shift; ;;
	'--ppa') DPUT_TARGET="ppa:$2"; shift; ;;
	'--noput') noput=1; ;;
	'--noorig') noorig=1; ;;
	-*)
		echo "Unrecognized option $1" >&2
		exit 1
		;;
	*)
		release_num="${VALID_RELEASE[$1]}"
		if [ ! -z "$release_num" ]; then
			if [ -z "$RELEASES" ]; then
				RELEASES="$1"
			else
				RELEASES="$RELEASES $1"
			fi
		else
			echo "Unrecognized distribution codename $1" >&2
			exit 1
		fi
		;;
	esac
	shift
done

if [ -z "$DPUT_TARGET" ]; then
	echo "No target for dput specified or configured in $HOME/.dput.cf" >&2
	exit 1
fi

[ -z "$RELEASES" ] && RELEASES="$DEFAULT_RELEASES"

PKGDIR=`readlink -f '.'`
pushd "$PKGDIR" >/dev/null
# Find base of package directory
while [ ! -f debian/changelog ] && [ ! `pwd` = "/" ]; do cd ..; done

if [ ! -f "debian/changelog" ]; then
	popd >/dev/null
	echo "Cannot find debian directory in $PKGDIR or any of its parent directories." >&2
	exit 1
else
	PKGDIR=`readlink -f '.'`
fi
echo "Found package root directory at $PKGDIR"

echo "Publishing $PKG to dput target $DPUT_TARGET"

changelog_original=`mktemp /tmp/ppa_publish.XXXXXX`
backup_dir=`mktemp -d /tmp/ppa_publish.XXXXXX`
cp -p "$PKGDIR/debian/changelog" "$changelog_original"
echo "Backed up $PKGDIR/debian/changelog to $changelog_original"
original_version_line=`head -n 1 "$changelog_original"`
original_pkgname=`echo "$original_version_line" | awk '{ print $1; }'`
original_version=`echo "$original_version_line" | awk '{ print substr($2, 2, length($2) - 2); }'`
original_release=`echo "$original_version_line" | awk '{ print substr($3, 1, length($3) - 1); }'`
original_flags=`echo "$original_version_line" | awk '{ print $4; }'`
echo "Original version: $original_version"

if [[ "$original_version" =~ .*~([0-9]{1,2}.[0-9]{1,2}.[0-9]{1,2})[0-9]* ]]; then
	original_version=`echo "$original_version" | sed -r 's/(.*)~[0-9]{1,2}.[0-9]{1,2}.[0-9]{1,2}/\1/'`
	echo "Original version without release: $original_version"
elif [[ "$original_version" =~ .*~(hardy|intrepid|jaunty|lucid|karmic|maverick|natty|oneiric|precise|quantal|raring|saucy|trusty|utopic|[0-9]{1,2}.[0-9]{1,2}.[0-9]{1,2})[0-9]* ]]; then
	original_version=`echo "$original_version" | sed -r 's/(.*)~[a-z0-9]+/\1/'`
	echo "Original version without release: $original_version"
fi

RELEASE_COUNT=1
for RELEASE in $RELEASES; do
	
	release_num="${VALID_RELEASE[$RELEASE]}"
	new_version="${original_version}~${release_num}.${RELEASE_COUNT}"
	new_version_line="${original_pkgname} (${new_version}) ${RELEASE}; ${original_flags}"
	echo "Building for $RELEASE ($new_version)"
	# prepare new changelog with a replaced first line
	(echo "${new_version_line}"; cat "$changelog_original" | sed '1,1d') > "$PKGDIR/debian/changelog"

	for f in "$PKGDIR/debian"/*; do
		f_base=`basename "$f"`
		f_ext="${f_base##*.}"
		[ "$f_ext" == "$f_base" ] && f_ext=''
		#echo "Got ext >>$f_ext<<"
		if [ "$f_ext" == "$RELEASE" ]; then
			f_name="${f_base%.*}"
			dest="$PKGDIR/debian/${f_name}"
			echo "Copy $f to $dest"
			[ -f "$dest" ] && mv -f "$dest" "$backup_dir/${f_name}"
			cp -f "$f" "$backup_dir/$f_base"
			mv "$f" "$dest"
		elif [ ! -z "$f_ext" ]; then
		
			file_is_for_different_release=0
			for rel in $VALID_RELEASE; do
				[ "$f_ext" == "$rel" ] && file_is_for_different_release=1
			done
			if [ $file_is_for_different_release -ne 0 ]; then
				dest="$PKGDIR/debian/$f_base"
				echo "Remove $f $f_ext (which is not for $RELEASE)"
				mv -f "$f" "$backup_dir/$f_base"
			else
				echo "Keep $f (which is not for any known release)"
			fi
		fi
	done

	export BUILD_TEST=1

	debuild_log=`mktemp /tmp/ppa_publish.XXXXXX`
	if [ $noorig -eq 0 ]; then
		debuild_opts='-sa'
	else
		debuild_opts='-sd'
	fi
	pushd "$PKGDIR"
	debuild -i -I -S $debuild_opts 2>&1 | tee "$debuild_log"
	if [ $noput -eq 0 ]; then
		CHANGES=`readlink -f "$PKGDIR/../$(sed -n 's/^.*signfile \(.*\.changes\).*$/\1/p' "$debuild_log")"`
		if [ -f "$CHANGES" ]; then
			echo -e "\nPublishing to $DPUT_TARGET with $CHANGES"
			dput "$DPUT_TARGET" "$CHANGES"
			echo -e "\nRemove all generated files"
			find "$PKGDIR/.." -maxdepth 1 -type f -name "$(basename $CHANGES _source.changes)*" -print -delete
		else
			echo "No changes file found, assume build failed."
		fi
	else
		echo "Do not upload the package"
	fi
	rm -rf "$debuild_log"

	for f in "$backup_dir"/*; do
		if [ -f "$f" ]; then
			filename=`basename "$f"`
			dest="$PKGDIR/debian/$filename"
			echo "Restore $f to $dest"
			mv -f "$f" "$dest"
		fi
	done
	
#	cat "$PKGDIR/debian/changelog"
done

echo "Restore original control and changelog"
cp -p  "$changelog_original" "$PKGDIR/debian/changelog"
rm -f "$changelog_original"
rm -rf "$backup_dir"
popd >/dev/null

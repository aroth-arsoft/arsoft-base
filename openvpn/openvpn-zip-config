#!/bin/bash
verbose=0
files=''
outdir=''
config_recipient=''
override_usermail=0
CONFIG_DIR='/etc/openvpn'
PUPPET_OPENVPN_DIR='/var/lib/puppet/modules/openvpn'

function usage()
{
	echo "openvpn-zip-config [OPTIONS] <files>"
	echo "    -h, --help      shows this help screen"
	echo "    -v,--verbose    verbose output"
	echo "    -o, --outdir    name of the output directory"
	echo "    -b, --basedir   name of the base directory (default: outfiledir)"
	echo "    --configdir     name of the openvpn config directory (default: $CONFIG_DIR)"
	echo "    --recipient     default recipient of the configuration zip"
	echo "    --override-usermail override the mail recipient of each configuration with the given one."
	exit 0
}

function verbose_exec()
{
	[ $verbose -ne 0 ] && echo "$@"
	"$@"
}

function get_config_name()
{
	local config_file="$1"
	local config_dir="$2"
	local fallback_name
	
	# check if a config_file is given; its empty when the server
	# client zip configs should be prepared.
	if [ -z "$config_file" ]; then
		fallback_name=`basename "$config_dir"`
		local more_than_one_config_file=0
		for f in "$config_dir"/*.conf "$config_dir"/*.ovpn; do
			if [ -f "$f" ]; then
				[ -z "$config_file" ] && config_file="$f" || more_than_one_config_file=1
			fi
		done
		if [ $more_than_one_config_file -ne 0 ]; then
			return 1
		fi
	else
		fallback_name=`basename "${config_file%.*}"`
	fi
	local name=`awk '/^#[ ]*(name)[ ]+.*$/ { print $3; }' "$config_file"`
	
	if [ -z "$name" ]; then
		name="$fallback_name"
	else
		name=`basename "${name%.*}"`
	fi
	echo -n "$name"
	return 0
}

function get_config_ostype()
{
	local config_file="$1"
	local config_dir="$2"
	local fallback_ostype
	
	# check if a config_file is given; its empty when the server
	# client zip configs should be prepared.
	if [ -z "$config_file" ]; then
		local more_than_one_config_file=0
		for f in "$config_dir"/*.conf "$config_dir"/*.ovpn; do
			if [ -f "$f" ]; then
				[ -z "$config_file" ] && config_file="$f" || more_than_one_config_file=1
			fi
		done
		if [ $more_than_one_config_file -eq 0 ]; then
			config_file_ext="${config_file##*.}"
			case "$config_file_ext" in
				'conf') fallback_ostype='linux' ;;
				'ovpn') fallback_ostype='win' ;;
			esac
		else
			return 1
		fi
	else
		local config_file_ext="${config_file##*.}"
		case "$config_file_ext" in
			'conf') fallback_ostype='linux' ;;
			'ovpn') fallback_ostype='win' ;;
		esac
	fi
	local ostype=`awk '/^#[ ]*(ostype)[ ]+.*$/ { print $3; }' "$config_file"`
	
	[ -z "$ostype" ] && ostype="$fallback_ostype"
	echo -n "$ostype"
	return 0
}

function zip_config()
{
	local config_type="$1"
	local config_file="$2"
	local config_dir="$3"
	local outfile="$4"

	name=`get_config_name "$config_file" "$config_dir"`
	ostype=`get_config_ostype "$config_file" "$config_dir"`

	[ $verbose -ne 0 ] && echo "compress $name ($ostype, $config_file, $config_dir/*) to $outfile"

	local num_errors=0
	local zipdir=`mktemp -d /tmp/openvpn_zip.XXXXXX`
	case "$ostype" in
		'linux')
			verbose_exec cp -p "$config_file" "$zipdir/$name.conf"
			verbose_exec mkdir "$zipdir/$name"
			local pem_files=`ls -1 "$config_dir"/*.{crt,pem} 2>/dev/null`
			for f in $pem_files; do
				if [ -r "$f" ]; then
					verbose_exec cp -p "$f" "$zipdir/$name"
				else
					echo "Cannot read $f"
					(( num_errors++ ))
				fi
			done
			;;
		'win'|'android'|'windows')
			verbose_exec cp -p "$config_file" "$zipdir/$name.ovpn"
			local pem_files=`ls -1 "$config_dir"/*.{crt,pem} 2>/dev/null`
			for f in $pem_files; do
				if [ -r "$f" ]; then
					verbose_exec cp -p "$f" "$zipdir"
				else
					echo "Cannot read $f" >&2
					(( num_errors++ ))
				fi
			done
			;;
		*)
			[ $verbose -ne 0 ] && echo "unhandled ostype $ostype"
			;;
	esac

	case "$config_type" in
		'client')
			;;
		'server')
			[ -d "$config_dir/ccd" ] && mkdir "$zipdir/$name/ccd" && cp -p "$config_dir/ccd"/* "$zipdir/$name/ccd"
			;;
	esac

	[ $verbose -ne 0 ] && echo "use base directory $zipdir"
	[ $verbose -ne 0 ] && ls -la "$zipdir"

	# check if the target/output file already exists
	if [ -f "$outfile" ]; then
		# ... and compare with the new zip content for changes
		local oldzipdir=`mktemp -d /tmp/openvpn_zip.XXXXXX`
		local unzipmsg=`/usr/bin/unzip -q "$outfile" -d "$oldzipdir" 2>&1`
		RES=$?
		if [ $RES -eq 0 ]; then
			[ $verbose -ne 0 ] && echo "unzipped $outfile to $oldzipdir"
			local diffmsg=`diff -qrN "$oldzipdir" "$zipdir"`
			RES=$?
			[ $RES -eq 0 ] && zip_changed=0 || zip_changed=1
			[ $verbose -ne 0 ] && echo "diff result $oldzipdir vs $zipdir $zip_changed"
			rm -rf "$oldzipdir"
		else
			[ $verbose -ne 0 ] && echo "WARNING: Failed to unzip $outfile to $oldzipdir"
			zip_changed=1
		fi
	else
		zip_changed=1
	fi

	if [ $zip_changed -ne 0 ]; then
		# goto the temp directory to create the relative path inside the zip
		pushd "$zipdir" > /dev/null
		[ $verbose -ne 0 ] && echo /usr/bin/zip -r "$outfile" . -i \*
		# TODO: need to pass --encrypt
		local msg=`/usr/bin/zip -q -r "$outfile" . -i \* 2>&1`
		RES=$?
		popd > /dev/null

		# secure the outfile
		[ -e "$outfile" ] && chmod 0600 "$outfile"
		if [ $RES -ne 0 ]; then
			[ -e "$outfile" ] && rm "$outfile"
			echo "Failed to ZIP from $zipdir into $outfile: $msg" >&2
		fi
	else
		# no need to re-create the sme zip file again
		true
	fi

	rm -rf "$zipdir"
	return $num_errors
}

function generate_client_config()
{
	local name="$1"
	local config_file="$2"
	local config_dir="$3"
	local outdir="$4"
	local clients_file="$PUPPET_OPENVPN_DIR/${name}_clients"
	
	if [ ! -r "$clients_file" ]; then
		echo "Cannot read client list from $clients_file" >&2
		return 1
	fi
	
	local client_zip_basename="$outdir/$(basename "$config_dir")"

	local puplic_address=`awk '/^#[ ]*(public-address)[ ]+.*$/ { print $3; }' "$config_file"`
	local puplic_port=`awk '/^#[ ]*(public-port)[ ]+.*$/ { print $3; }' "$config_file"`
	local proto=`awk '/^(proto)[ ]+.*$/ { print $2; }' "$config_file"`
	local cipher=`awk '/^(cipher)[ ]+.*$/ { print $2; }' "$config_file"`
	local keepalive_ping=`awk '/^(keepalive)[ ]+.*$/ { print $2; }' "$config_file"`
	local keepalive_pingrestart=`awk '/^(keepalive)[ ]+.*$/ { print $3; }' "$config_file"`
	local server_ca=`awk '/^(ca)[ ]+.*$/ { print $2; }' "$config_file"`
	local server_dh=`awk '/^(dh)[ ]+.*$/ { print $2; }' "$config_file"`
	local server_crl=`awk '/^(crl-verify)[ ]+.*$/ { print $2; }' "$config_file"`

	[ $verbose -ne 0 ] && echo "Server CA: $server_ca"
	[ $verbose -ne 0 ] && echo "Server DH: $server_dh"
	[ $verbose -ne 0 ] && echo "Server CRL: $server_crl"
	
	# $client_line = "${namesafe}\t${ostype}\t${serverconf}\t${serverdir}\t${client_certfile}\t${client_keyfile}\t${usermail}\t${iroute_joined}\n"
	while read client_line
	do
		local clientname=`echo "$client_line" | awk -F '\t' '{ print $1; }'`
		local clientostype=`echo "$client_line" | awk -F '\t' '{ print $2; }'`
		local serverconf=`echo "$client_line" | awk -F '\t' '{ print $3; }'`
		local serverdir=`echo "$client_line" | awk -F '\t' '{ print $4; }'`
		local clientcert=`echo "$client_line" | awk -F '\t' '{ print $5; }'`
		local clientkey=`echo "$client_line" | awk -F '\t' '{ print $6; }'`
		local usermail=`echo "$client_line" | awk -F '\t' '{ print $7; }'`
		local routes_raw=`echo "$client_line" | awk -F '\t' '{ print $8; }'`
		#clientname clientostype serverconf serverdir clientcert clientkey usermail routes_raw
		client_zipfile="${client_zip_basename}_${clientname}.zip"
		echo "Server ${name}: Generate configuration for ${clientname} ($clientostype) to $client_zipfile"
		case "$clientostype" in
			'linux')
				status_line="status /var/log/openvpn/${clientname}-status.log"
				log_append_line="log-append /var/log/openvpn/${clientname}.log"
				config_ext='conf'
				client_file_dir="/etc/openvpn/${clientname}/"
				;;
			'win'|'windows')
				status_line="# status ${clientname}-status.log"
				log_append_line="# log-append ${clientname}.log"
				config_ext='ovpn'
				client_file_dir=''
				;;
			'android')
				status_line="# status ${clientname}-status.log"
				log_append_line="# log-append ${clientname}.log"
				config_ext='ovpn'
				client_file_dir=''
				;;
			*)
				status_line="# status ${clientname}-status.log"
				log_append_line="# log-append ${clientname}.log"
				config_ext='conf'
				client_file_dir=''
				;;
		esac
		
		# prepare route lines
		if [ ! -z "$routes_raw" ]; then
			routes=`echo "# begin of routes to the server"; echo "$routes_raw" | tr ',' '\n' | sed 's@^@route @'; echo "# end of routes"; `
		else
			routes='# No routes defined'
		fi
		[ $verbose -ne 0 ] && echo "client usermail=$usermail"
		[ $verbose -ne 0 ] && echo "client routes=$routes_raw"

		local client_configdir=`mktemp -d /tmp/openvpn_client.XXXXXX`
		local client_ca_line=''
		local client_dh_line=''
		local client_crl_line=''
		local client_cert_line=''
		local client_key_line=''
		if [ ! -z "$server_ca" -a -f "$server_ca" ]; then
			cp "$server_ca" "$client_configdir/ca.pem"
			client_ca_line="ca ${client_file_dir}ca.pem"
		fi
		if [ ! -z "$server_dh" -a -f "$server_dh" ]; then
			cp "$server_dh" "$client_configdir/dh.pem"
			client_dh_line="dh ${client_file_dir}dh.pem"
		fi
		if [ ! -z "$server_crl" -a -f "$server_crl" ]; then
			cp "$server_crl" "$client_configdir/crl.pem"
			client_crl_line="crl-verify ${client_file_dir}crl.pem" 
		fi
		[ -f "$clientcert" ] && cp "$clientcert" "$client_configdir/cert.pem" && client_cert_line="cert ${client_file_dir}cert.pem"
		[ -f "$clientkey" ] && cp "$clientkey" "$client_configdir/key.pem" && client_key_line="key ${client_file_dir}key.pem"
		
		if [ -z "$client_cert_line" ]; then
			echo "Missing client certficate $clientcert" >&2
			continue
		fi
		if [ -z "client_key_line" ]; then
			echo "Missing client key $clientkey" >&2
			continue
		fi
		if [ -z "client_ca_line" ]; then
			echo "Missing server certficate $server_ca" >&2
			continue
		fi

		cat > "$client_configdir/${clientname}.${config_ext}" <<CONFEOF
#
# THIS FILE IS AUTOMATICALLY GENERATED BY
# openvpn-zip-config
#
# name $clientname
# ostype $clientostype
client
remote $puplic_address $puplic_port
ns-cert-type server
nobind
proto $proto
dev tun
cipher $cipher
verb 1
mute 20
keepalive $keepalive_ping $keepalive_pingrestart
resolv-retry infinite

comp-lzo
float
persist-tun
persist-key
persist-local-ip
persist-remote-ip
push "persist-key"
push "persist-tun"

$client_cert_line
$client_key_line
$client_ca_line
$client_dh_line
$client_crl_line

${status_line}
${log_append_line}
$routes
#
# EOF
#
CONFEOF
		[ $verbose -gt 1 ] && cat "$client_configdir/${clientname}.${config_ext}"

		# use the config directory of the server (for certs)
		zip_changed=0
		zip_config "client" "$client_configdir/${clientname}.${config_ext}" "$client_configdir" "$client_zipfile"
		if [ $zip_changed -ne 0 ]; then
			mail_client_config "${clientname}" "$usermail" "$client_zipfile"
		fi
		rm -rf "$client_configdir"
	done < "$clients_file"
	return 0
}

function mail_client_config()
{
	local name="$1"
	local usermail="$2"
	local zipfile="$3"
	
	local mail_sender='root'
	local mail_recipient=''
	
	if [ -z "$usermail" -o $override_usermail -ne 0 ]; then
		mail_recipient="$config_recipient"
	else
		mail_recipient="$usermail"
	fi
	
	if [ ! -z "$mail_recipient" ]; then
		local mail_subject="OpenVPN configuration $name"
		local mail_message=`cat <<MAILMSGEND
Your OpenVPN configuration has changed. The attached configuration has
been automatically generated with the latest configuration.
MAILMSGEND`
		[ $verbose -ne 0 ] && echo "Sending $zipfile to $mail_recipient"
		echo "$mail_message"
		verbose_exec /usr/bin/postfix-sendmail -f "$mail_sender" -t "$mail_recipient" -s "$mail_subject" -m "$mail_message" --attach "$zipfile"
	else
		[ $verbose -ne 0 ] && echo "No mail recipient specified"
	fi
}

function handle_config()
{
	local name="$1"
	local config_file="$2"
	local outdir="$3"
	if [ -e "$config_file" ]; then
		local config_dir="${config_file%%.conf}"
		local config_zip="$outdir/$(basename "$config_dir").zip"
		[ $verbose -ne 0 ] && echo "handle_config name=${name}"
		[ $verbose -ne 0 ] && echo "handle_config config_file=${config_file}"
		[ $verbose -ne 0 ] && echo "handle_config config_dir=${config_dir}"
		[ $verbose -ne 0 ] && echo "handle_config config_zip=${config_zip}"
		local type=`awk '/^(server[ ]+.*|client[ ]*)$/ { print $1; }' "$config_file"`
		if [ "$type" == "client" ]; then
			[ $verbose -ne 0 ] && echo "client config"
			echo "Client ${name}: Write to $config_zip"
			zip_config "client" "$config_file" "$config_dir" "$config_zip"
		elif [ "$type" == "server" ]; then
			[ $verbose -ne 0 ] && echo "server config"
			echo "Server ${name}: Write to $config_zip"
			zip_config "server" "$config_file" "$config_dir" "$config_zip"
			generate_client_config "$name" "$config_file" "$config_dir" "$outdir"
#			if [ -d "$config_dir/clients" ]; then
#				for CLIENTCONFIG in "$config_dir/clients"/*; do
#					if [ -d "$CLIENTCONFIG" ]; then
#						zip_config "client" "" "$CLIENTCONFIG"
#					fi
#				done
#			fi
		else
			echo "Unhandled config type in $config_file: $type" >&2
		fi
	else
		echo "Cannot read $config_file" >&2
	fi
}

function main()
{
	[ -z "$outdir" ] && outdir=`pwd`

	if [ ! -d "$CONFIG_DIR" ]; then
		echo "OpenVPN is not installed. Please install openvpn first." >&2
		exit 1
	fi

	if [ ! -d "$outdir" ]; then
		echo "Output directory $outdir does not exist." >&2
		exit 1
	else
		outdir=`readlink -f "$outdir"`
	fi
	
	if [ $override_usermail -ne 0 -a -z "$config_recipient" ]; then
		echo "Override user mail is specified, but no recipient is given." >&2
		exit 1
	fi

	if [ -z "$selected_configs" ]; then
		for CONFIG in $CONFIG_DIR/*.conf; do
			local tmp=`basename $CONFIG`
			local name=${tmp%%.conf}
			handle_config "$name" "$CONFIG" "$outdir"
		done
	else
		for NAME in $selected_configs; do
			handle_config "$NAME" "$CONFIG_DIR/$NAME.conf" "$outdir"
		done
	fi
}

# parse command line arguments
while [ $# -ne 0 ]; do
	case "$1" in
		"-?"|"-h"|"--help") usage;;
		"-v"|"--verbose") verbose=1; ;;
		"-o"|"--outdir") outdir="$2"; shift ;;
		"-b"|"--basedir") basedir="$2"; shift ;;
		"-t"|"--topdir") topdir="$2"; shift ;;
		"--recipient") config_recipient="$2"; shift ;;
		"--override-usermail") override_usermail=1; ;;
		*)
			if [ ! -z "$selected_configs" ]; then
				selected_configs="$selected_configs $1"
			else
				selected_configs="$1"
			fi
		;;
	esac
	shift
done

main

exit 0

#!/bin/bash

SCRIPTDIR=`dirname \`readlink -f "$0"\``
BACKUPDIR='/local/backup/trac'
LATEST_BACKUP_DIR='/local/backup/latest'
TRACS='/var/www/trac'
QUIET=0

[ -f "$SCRIPTDIR/sshcopy" ] && source "$SCRIPTDIR/sshcopy" || echo "sshcopy scripts ($SCRIPTDIR/sshcopy) are not available"

[ ! -d "$BACKUPDIR" ] && mkdir -p "$BACKUPDIR"
[ ! -d "$LATEST_BACKUP_DIR" ] && mkdir -p "$LATEST_BACKUP_DIR"

# parse command line arguments
while [ $# -ne 0 ]; do
	case "$1" in
	'-?'|'-h'|'--help') usage;; 
	"-q"|"--quiet") QUIET=1 ;;
	*)
		TRACS="$TRACS $1"
	;;
	esac
	shift
done

function usage() {
	echo "usage: tracbackup [-q|--quiet] [repo]"
	exit 1
}

function tracdump() {
	TRAC=$1
	BAKFILE=$2

	TMPDIR=`mktemp -d /tmp/tracXXXXXX`
	BAKDIR=$TMPDIR/`basename $TRAC`
	echo -n "Backup $TRAC to $BAKFILE (using $BAKDIR)"
	msg=`trac-admin "$TRAC" hotcopy 2>&1 $BAKDIR --no-database`
	RES=$?
	if [ $RES -eq 0 ]; then
		msg=`tar cfj "$BAKFILE" "$BAKDIR" 2>&1`
		RES=$?
		if [ $RES -eq 0 ]; then
				echo "[done]"
		else
				echo " [compress failed]"
				echo "$msg"
		fi
	else
		echo " [failed]"
		echo "$msg"
	fi
	rm -rf "$TMPDIR"
	return $RES
}

[ ! -d "$BACKUPDIR" ] && mkdir -p "$BACKUPDIR"
[ ! -d "$LATEST_BACKUP_DIR" ] && mkdir -p "$LATEST_BACKUP_DIR"

for r in $TRACS; do
	if [ ! -d $r ]; then
			echo "trac installation $r not available"
			continue
	fi

	name=`basename $r`
	BAKFILE=$BACKUPDIR/trac_${name}_`date +%Y%m%d`.bz2
	tracdump "$r" "$BAKFILE"; RES=$?
	if [ $RES -eq 0 ]; then
		putmsg=`putremote $BAKFILE && remove_oldest "trac_${name}_*"`
		if [ $? -ne 0 ]; then
			echo "$dumpmsg"
			echo "$putmsg"
		fi

		cp "$BAKFILE" "$LATEST_BACKUP_DIR/fast-srv01_trac_${name}.tar.bz2" || echo "failed to copy backup file"
	else
		echo "trac dump failed with error $RES"
		[ -f "$BAKFILE" ] && rm -f "$BAKFILE"
	fi
done


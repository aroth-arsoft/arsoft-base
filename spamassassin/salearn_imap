#!/bin/bash

FETCHMAIL_BIN=`which fetchmail`
TEE_BIN='/usr/bin/tee'
SALEARN_BIN=`which sa-learn`

MAIL_SERVER=`cat /etc/mailname`
MAIL_USER='spamlearner'
KEYTAB='/etc/spamassassin/spamlearner.keytab'

SSL_CERT_PATH='/etc/ssl/certs'
SSL_CERT_FILE=''
SSL_FINGERPRINT=''
SSL_PROTO=''
SSL_CERT_CHECK=0

# fetchall, norewrite
FETCHMAIL_OPT='-a -n'
IMAP_TIMEOUT=10

SPAM_FOLDER='shared/Spam'
HAM_FOLDER='shared/NoSpam'
PID_FILE='/var/run/amavis/salearn_imap.pid'

verbose=0
debug=0
keep=0
timed=0
silent=0

test -f /etc/default/salearn && . /etc/default/salearn

function usage()
{
	echo "salearn_imap <params>"
	echo "    -h, --help                shows this help screen"
	echo "    -v,--verbose              verbose output"
	echo "    -d,--debug                enable debugging"
	echo "    --keep                    do not remove any mails from server"
	echo "    -k,--keytab               keytab file for kerberos login"
	echo "    --spam <folder>           folder to look for spam messages"
	echo "    --ham <folder>            folder to look for ham messages"
	echo "    --server <server>         specifies the mail server to use"
	echo "    --timeout <secs>          specifies the timeout in seconds"
	echo "    --timed                   measure the time required for learning"
	echo "    --silent                  run fetchmail in silent mode"
	echo "  encryption:"
	echo "    --sslcertpath <dir>       specifies the directory where to find CA certificates"
	echo "    --sslcertfile <file>      specifies the certificate to verify the server against"
	echo "    --sslfingerprint <str>    fingerprint of the server to check the certificate"
	echo "    --sslproto <proto>        specifies the used encryption protocol (SSL2, SSL23, SSL3, TLS1)"
	echo "    --sslcertck               enable SSL certificate checking"
	exit 0
}

function fatal_error()
{
	echo "$@" 1>&2
	[ -f "$PID_FILE" ] && rm "$PID_FILE"
	exit 1
}

# parse command line arguments
while [ $# -ne 0 ]; do
	case "$1" in
		"-?"|"-h"|"--help") usage;;
		"-v"|"--verbose") verbose=1; ;;
		"-d"|"--debug") debug=1; verbose=1; keep=1; ;;
		"--keep") keep=1; ;;
		"-k"|"--keytab") KEYTAB="$2"; shift; ;;
		"--spam") SPAM_FOLDER="$2"; shift; ;;
		"--ham") HAM_FOLDER="$2"; shift; ;;
		"--server") MAIL_SERVER="$2"; shift; ;;
		"--timeout") IMAP_TIMEOUT="$2"; shift; ;;
		"--timed") timed=1; ;;
		"--silent") silent=1; ;;
		"--sslcertpath") SSL_CERT_PATH="$2"; shift; ;;
		"--sslcertfile") SSL_CERT_FILE="$2"; shift; ;;
		"--sslfingerprint") SSL_FINGERPRINT="$2"; shift; ;;
		"--sslproto") SSL_PROTO="$2"; shift; ;;
		"--sslcertck") SSL_CERT_CHECK=1; ;;
		*)
			if [ ! -z "$message" ]; then
				message="$message $1"
			else
				message="$1"
			fi
		;;
	esac
	shift
done

if [ -z "$FETCHMAIL_BIN" ]; then
	echo "unable to find fetchmail. please install fetchmail" 1>&2
	exit 1
fi

if [ -z "$SALEARN_BIN" ]; then
	echo "unable to find sa-learn; please install spamassassin" 1>&2
	exit 1
fi

if [ -f "$PID_FILE" ]; then
	pid=`cat "$PID_FILE"`
	[ $verbose -ne 0 ] && echo "check for PID $pid"
	if kill -0 2&>1 > /dev/null $pid; then
		echo "$0 is already running" 1>&2
		exit 1
	else
		rm "$PID_FILE"
	fi
fi
echo $$ > "$PID_FILE"
[ $verbose -ne 0 ] && echo "start as PID $$"

has_kerberos_ticket=0
if [ ! -z "$KEYTAB" ]; then
	if [ -r "$KEYTAB" ]; then
		unset KRB5CCNAME
		/usr/bin/kinit -k -t "$KEYTAB" "$MAIL_USER"
		RES=$?
		if [ $RES -eq 0 ]; then
			[ $verbose -ne 0 ] && echo "Kerberos login as $MAIL_USER successfully."
			has_kerberos_ticket=1
			FETCHMAIL_OPT="$FETCHMAIL_OPT --auth gssapi"
		else
			fatal_error "Kerberos login as $MAIL_USER failed."
		fi
	else
		fatal_error "Keytab file $KEYTAB not readable."
	fi
fi

if [ ! -z "$SSL_CERT_FILE" ]; then
	FETCHMAIL_OPT="$FETCHMAIL_OPT --sslcertfile '$SSL_CERT_FILE'"
elif [ ! -z "$SSL_CERT_PATH" ]; then
	FETCHMAIL_OPT="$FETCHMAIL_OPT --sslcertpath '$SSL_CERT_PATH'"
fi
[ ! -z "$SSL_FINGERPRINT" ] && FETCHMAIL_OPT="$FETCHMAIL_OPT --sslfingerprint '$SSL_FINGERPRINT'"
[ ! -z "$SSL_PROTO" ] && FETCHMAIL_OPT="$FETCHMAIL_OPT --sslproto '$SSL_PROTO'"
[ $SSL_CERT_CHECK -ne 0 ] && FETCHMAIL_OPT="$FETCHMAIL_OPT --sslcertck"
[ $keep -ne 0 ] && FETCHMAIL_OPT="$FETCHMAIL_OPT -k"
if [ $verbose -ne 0 ]; then
	FETCHMAIL_OPT="$FETCHMAIL_OPT -v"
else
	[ $silent -ne 0 ] && FETCHMAIL_OPT="$FETCHMAIL_OPT -s"
fi

if [ $debug -eq 0 ]; then
	SPAM_LEARN_CMD="$SALEARN_BIN --spam --single 2>&1 > /dev/null"
	HAM_LEARN_CMD="$SALEARN_BIN --ham --single 2>&1 > /dev/null"
else
	[ $verbose -ne 0 ] && echo "Kerberos login as $MAIL_USER successfully."
	now=`LANG=C /bin/date`
	echo "$now" > /tmp/spam_test
	echo "$now" > /tmp/ham_test
	SPAM_LEARN_CMD='/bin/cat >> /tmp/spam_test'
	HAM_LEARN_CMD='/bin/cat >> /tmp/ham_test'
fi
[ $verbose -ne 0 ] && echo "Using command for spam: $SPAM_LEARN_CMD"
[ $verbose -ne 0 ] && echo "Using command for ham: $HAM_LEARN_CMD"
[ $verbose -ne 0 ] && echo "fetchmail options: $FETCHMAIL_OPT"

# fetchmail exit codes:
# 0       One or more messages were successfully retrieved
# 1       There was no mail awaiting retrieval.
# other   error

start_time=`date +%s`
fetchmail_cmd="$FETCHMAIL_BIN $FETCHMAIL_OPT --timeout $IMAP_TIMEOUT -u $MAIL_USER -p IMAP --folder '$SPAM_FOLDER' -m '$SPAM_LEARN_CMD' '$MAIL_SERVER'"
[ $verbose -ne 0 ] && echo "$fetchmail_cmd"
msg=`eval "$fetchmail_cmd" 2>&1`
RES=$?
end_time=`date +%s`
diff_time=$(($end_time-$start_time))
if [ $RES -eq 0 -o $RES -eq 1 ]; then
	[ $timed -ne 0 ] && echo -e "$fetchmail_cmd successfully took $diff_time seconds\n$msg"
else
	echo -e "$fetchmail_cmd failed with exit code $RES ($diff_time seconds)\n$msg" 1>&2
fi

start_time=`date +%s`
fetchmail_cmd="$FETCHMAIL_BIN $FETCHMAIL_OPT --timeout $IMAP_TIMEOUT -u $MAIL_USER -p IMAP --folder '$HAM_FOLDER' -m '$HAM_LEARN_CMD' '$MAIL_SERVER'"
[ $verbose -ne 0 ] && echo "$fetchmail_cmd"
msg=`eval "$fetchmail_cmd" 2>&1`
RES=$?
end_time=`date +%s`
diff_time=$(($end_time-$start_time))
if [ $RES -eq 0 -o $RES -eq 1 ]; then
	[ $timed -ne 0 ] && echo -e "$fetchmail_cmd successfully took $diff_time seconds\n$msg"
else
	echo -e "$fetchmail_cmd failed with exit code $RES ($diff_time seconds)\n$msg" 1>&2
fi

[ $has_kerberos_ticket -ne 0 ] && /usr/bin/kdestroy

[ -f "$PID_FILE" ] && rm "$PID_FILE"

exit 0

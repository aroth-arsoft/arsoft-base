#!/bin/bash

verbose=1
debug=0

ARSOFT_SCRIPTS_DHCLIENT_ENTER_DIR='/usr/lib/arsoft-dhcp/dhclient-enter'
ARSOFT_SCRIPTS_DHCLIENT_EXIT_DIR='/usr/lib/arsoft-dhcp/dhclient-exit'
ARSOFT_SCRIPTS_DHCLIENT_ACTIVE_ENTER='apt cups heimdal postfix ldap puppet'
ARSOFT_SCRIPTS_DHCLIENT_ACTIVE_EXIT='apt cups heimdal postfix ldap puppet'

[ -r /etc/default/arsoft-scripts ] && source /etc/default/arsoft-scripts

scriptdir='/usr/sbin'
realscriptfile=`readlink -f "$0"`

function log_debug() {
	[ $debug -ne 0 ] && echo "$@"
}

function log_info() {
	[ $verbose -ne 0 ] && echo "$@"
}

function log_warn() {
	echo "$@"
}

function log_err() {
	echo "$@" 1>&2
	logger -p daemon.err "$@"
}

function verbose_exec() {
	[ $verbose -ne 0 ] && echo "$@"
	"$@"
}

function is_ipv4() {
    local ip="$1"
    [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] && true || false
}

function valid_ip() {
    local ip="$1"
    local stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

function get_interface_for_host() {
	local addr=''
	if is_ipv4 "$1"; then
		addr="$1"
	else
		addr=`LANG=C /usr/bin/host "$1" | awk '/has address/ { print $4 }'`
	fi
	if [ ! -z "$addr" ]; then
		LANG=C /sbin/ip route get "$addr" 2>/dev/null | awk '{ if(match($0,"dev [a-zA-Z0-9]+")) { print substr($0, RSTART+4, RLENGTH-4); exit 0 } } END { exit 1 }' && true || false
	else
		false
	fi
}

function is_interface_for_host() {
	required_interface=`get_interface_for_host "$1"`
	[ "$required_interface" == "$interface" ]
}

function get_dns_txt_record() {
	local record_name="$1"
	LANG=C /usr/bin/host -t TXT "$1" | awk -F '"' '/descriptive text/ { print $2; exit 0 } END { exit 1 }' && true || false
}

function run_hook() {
	log_info "run_hook $@"
    local script="$1"
    local exit_status
    shift	# discard the first argument, then the rest are the script's

    if [ -f $script ]; then
        . $script "$@"
		exit_status=$?
		if [ $exit_status -ne 0 ]; then
			log_err "$script returned non-zero exit status $exit_status"
		fi    
	else
		log_err "run_hook $script does not exist"
		exit_status=1
    fi

    return $exit_status
}

function run_enter_scripts() {
	local exit_status
	local basescriptdir=''
	[ $debug -ne 0 ] && basescriptdir=`dirname "$realscriptfile"`'/../'
	for current_script in $ARSOFT_SCRIPTS_DHCLIENT_ACTIVE_ENTER; do
		[ $debug -ne 0 ] && scriptdir=`readlink -f "$basescriptdir/$current_script"`
		run_hook "$ARSOFT_SCRIPTS_DHCLIENT_ENTER_DIR/$current_script" "$@" || true
		exit_status=$?
	done

    return $exit_status
}

function run_exit_scripts() {
	local exit_status
	local basescriptdir=''
	[ $debug -ne 0 ] && basescriptdir=`dirname "$realscriptfile"`'/../'
	for current_script in $ARSOFT_SCRIPTS_DHCLIENT_ACTIVE_EXIT; do
		[ $debug -ne 0 ] && scriptdir=`readlink -f "$basescriptdir/$current_script"`
		run_hook "$ARSOFT_SCRIPTS_DHCLIENT_EXIT_DIR/$current_script" "$@" || true
		exit_status=$?
	done

    return $exit_status
}

function perform_action() {
	log_info "interface $interface"
	log_info "phase $phase"
	log_info "reason $reason"

	if [ "$phase" == 'enter' ]; then
		run_enter_scripts "$@"
	elif [ "$phase" == 'exit' ]; then
		run_exit_scripts "$@"
	else
		log_err "unknown or unspecified phase $phase"
	fi
}

function prepare_testing() {
	[ -z "$interface" ] && interface='eth0'
	new_domain_name=`dnsdomainname`
	new_host_name=`hostname`
	old_domain_name='old-'$new_domain_name
	old_host_name='old-'$new_host_name
	[ -z "$reason" ] && reason='RENEW'
	[ -z "$phase" ] && phase='exit'
	realscriptfile=`readlink -f "$0"`
	scriptdir=`dirname "$realscriptfile"`
	ARSOFT_SCRIPTS_DHCLIENT_ENTER_DIR="$scriptdir"
	ARSOFT_SCRIPTS_DHCLIENT_EXIT_DIR="$scriptdir"
}

function usage() {
	echo "$realscriptfile: [OPTIONS] <enter|exit> <interface IFNAME> <reason>"
	echo "        exit          run the exit hook scripts"
	echo "        enter         run the enter hook scripts"
	echo "        if|interface|iface"
	echo "                      specified the interface to run the scripts for."
	echo "the following reason can be specified:"
	echo "  MEDIUM, PREINIT, BOUND, RENEW, REBIND, REBOOT, EXPIRE, FAIL, STOP, RELEASE, NBI, TIMEOUT"
	exit 0
}

# parse command line arguments
while [ $# -ne 0 ]; do        
	case "$1" in          
	'-?'|'-h'|'--help') usage;; 
	'-v'|'--verbose') verbose=1; ;;
	'-d'|'--debug') debug=1; ;;
	'enter'|'exit') phase="$1"; ;;
	'MEDIUM'|'PREINIT'|'BOUND'|'RENEW'|'REBIND'|'REBOOT'|'EXPIRE'|'FAIL'|'STOP'|'RELEASE'|'NBI'|'TIMEOUT') reason="$1"; ;;
	'if'|'interface'|'iface') interface="$2"; shift; ;;
	*)                          
		echo "Unrecognized parameter $1"
		exit 1
	;;                                      
	esac                                    
	shift                                   
done

if [ $debug -ne 0 ]; then
	# if debug is requested, guess the common parameters to simplify testing
	[ -z "$interface" ] && interface='eth0'
	[ -z "$reason" ] && reason='RENEW'
	[ -z "$phase" ] && phase='exit'
	
	prepare_testing
else
	if [ -z "$phase" ]; then
		log_err "$realscriptfile: no phase specified."
		exit 1
	fi

	if [ -z "$interface" ]; then
		log_err "$realscriptfile: no interface specified."
		exit 1
	fi

	if [ -z "$reason" ]; then
		log_err "$realscriptfile: no reason specified."
		exit 1
	fi
fi

# ready to do the action
perform_action

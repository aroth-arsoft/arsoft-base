#!/bin/bash
#
# /usr/bin/mythtv-restart

verbose=0
action=''
control_socket='/tmp/mythtv-restart'
control_buffer='/tmp/mythtv-restart.buffer'
config_file='/etc/default/mythtv-frontend'

function usage()
{
    echo "mythtv-restart [action]"
    echo "    -h, --help      shows this help screen"
	echo "    -v, --verbose   enable verbose output"
	echo "  action:"
	echo "    frontend        starts the MythTV frontend"
	echo "    xterm           starts the X terminal"
	echo "    setup           starts the MythTV setup"
	echo "    vlc             starts the Video LAN player (VLC)"
    exit 0
}

function perform_start_backend()
{
	local mythtv_backend_status=`/sbin/initctl status mythtv-backend 2>&1 | grep 'running' > /dev/null; echo $?`
	if [ $mythtv_backend_status -ne 0 ]; then
		# mythtv-backend is not running
		sudo /sbin/initctl stop mythtv-backend
	fi
}

function perform_stop_backend()
{
	local mythtv_backend_status=`/sbin/initctl status mythtv-backend 2>&1 | grep 'running' > /dev/null; echo $?`
	if [ $mythtv_backend_status -eq 0 ]; then
		# mythtv-backend is running
		sudo /sbin/initctl start mythtv-backend
	fi
}

function read_default_config_frontend()
{
	[ -f "$config_file" ] && awk -F '=' "/^ *(MYTHTV_FRONTEND)/ { gsub(\"'\",\"\",\$2); print \$2 }" "$config_file"
}

function cleanup()
{
	[ -p "$control_socket" ] && rm -f "$control_socket"
	[ -f "$control_buffer" ] && rm -f "$control_buffer"
	[ $verbose -ne 0 ] && echo "Cleanup"
	exit 0
}

# parse command line arguments
while [ $# -ne 0 ]; do
	case "$1" in
		"-?") usage;;
		"-h") usage;;
		"--help") usage;;
		"-v"|"--verbose") verbose=1; ;;
		*)
			if [ -z "$action" ]; then
				action="$1"
			else
				echo "action $action already given."
				exit 1
			fi
		;;
	esac
	shift
done

[ -f "$config_file" ] && source "$config_file"

if [ ! -z "$action" ]; then
	if [ ! -p "$control_socket" ]; then
		echo "mythtv-restart not running ($control_socket does not exist)."
		exit 1
	else
		echo "write $action to $control_socket"
		echo "$action" > "$control_socket"
	fi
else
	if [ ! -p "$control_socket" ]; then
		mkfifo "$control_socket"
	else
		echo "mythtv-restart already running."
		exit 1
	fi

	set -m # Enable Job Control

	trap cleanup EXIT
	trap cleanup SIGINT

	# clear the X session error log
	echo "" > $HOME/.xsession-errors

	last_command_pid=0
	last_read_pid=0
	quit=0
	
	# Loop to get the correct application running
	while [ $quit -eq 0 ]; do
		if [ $last_read_pid -ne 0 ]; then
			#echo "last read is dead $last_read_pid"
			kill -0 $last_read_pid 2>/dev/null || last_read_pid=0
		fi
		if [ $last_read_pid -eq 0 ]; then
			if [ -f "$control_buffer" ]; then
				line=`cat "$control_buffer"`
				echo -n > "$control_buffer"
			fi
			(read private_line 2> /dev/null < "$control_socket"; echo "$private_line" > "$control_buffer") &
			last_read_pid=$!
			[ $verbose -ne 0 ] && echo "started read as pid $last_read_pid; $line"
		fi

		if [ $last_command_pid -ne 0 ]; then
			kill -0 $last_command_pid 2>/dev/null && is_running=1 || is_running=0
		else
			is_running=0
		fi
		[ $verbose -ne 0 ] && echo "process running $is_running"
		if [ $is_running -eq 0 ]; then
			config_line=`read_default_config_frontend`
		fi
		
		if [ ! -z "$line" -o ! -z "$config_line" ]; then
			if [ $last_command_pid -ne 0 ]; then
				# signal last command to terminate, but do not
				# care about errors like already terminated.
				kill $last_command_pid 2>/dev/null
				[ $verbose -ne 0 ] && echo "Done with $last_command_pid"
			fi
			
			if [ ! -z "$line" ]; then
				command_line="$line"
				line=''
			elif [ ! -z "$config_line" ]; then
				command_line="$config_line"
				config_line=''
			fi
			
			[ $verbose -ne 0 ] && echo "Got $command_line"

			start_backend=0
			start_command=''
			kill_process=''
			post_delay=0
			
			case "$command_line" in
				'frontend')
					start_backend=1
					start_command='/usr/bin/mythfrontend'
					kill_process='/usr/bin/mythfrontend.real'
					post_delay=2
					;;
				'setup')
					start_command='/usr/bin/mythtv-setup'
					kill_process='/usr/bin/mythtv-setup.real'
					;;
				'xterm')
					start_command='/usr/bin/xterm -maximized'
					;;
				'vlc')
					start_command='/usr/bin/vlc --ignore-config'
					;;
				'eyes'|'xeyes')
					start_command='/usr/bin/xeyes'
					;;
				'quit'|'exit')
					quit=1
					;;
				*)
					start_command="$command_line"
					;;
			esac
			
			[ $start_backend -ne 0 ] && perform_start_backend || perform_stop_backend

			[ ! -z "$kill_process" ] && killall "$kill_process"
			if [ $quit -eq 0 ]; then
				if [ ! -z "$start_command" ]; then
					#echo "got command $start_command"
					$start_command &
					last_command_pid=$!
					[ $verbose -ne 0 ] && echo "Started command $start_command with id $last_command_pid"
				else
					last_command_pid=0
					[ $verbose -ne 0 ] && echo "empty command"
				fi
			else
				[ $verbose -ne 0 ] && echo "quit"
			fi
		else
			[ $verbose -ne 0 ] && echo "sleep for one second"
			sleep 1
		fi
	done

	cleanup
fi

#
# EOF
#

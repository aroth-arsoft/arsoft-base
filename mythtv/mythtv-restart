#!/bin/bash
#
# /usr/bin/mythtv-restart

verbose=0
action=''

function usage()
{
    echo "mythtv-restart [action]"
    echo "    -h, --help      shows this help screen"
	echo "    -v, --verbose   enable verbose output"
	echo "  action:"
	echo "    frontend        starts the MythTV frontend"
	echo "    xterm           starts the X terminal"
	echo "    setup           starts the MythTV setup"
	echo "    vlc             starts the Video LAN player (VLC)"
    exit 0
}

function perform_start_backend()
{
	local mythtv_backend_status=`/sbin/initctl status mythtv-backend 2>&1 | grep 'running' > /dev/null; echo $?`
	if [ $mythtv_backend_status -ne 0 ]; then
		# mythtv-backend is not running
		sudo /sbin/initctl stop mythtv-backend
	fi
}

function perform_stop_backend()
{
	local mythtv_backend_status=`/sbin/initctl status mythtv-backend 2>&1 | grep 'running' > /dev/null; echo $?`
	if [ $mythtv_backend_status -eq 0 ]; then
		# mythtv-backend is running
		sudo /sbin/initctl start mythtv-backend
	fi
}

function cleanup()
{
	rm -f "/tmp/mythtv-restart"
	echo "Cleanup"
	exit 0
}

# parse command line arguments
while [ $# -ne 0 ]; do
	case "$1" in
		"-?") usage;;
		"-h") usage;;
		"--help") usage;;
		"-v"|"--verbose") verbose=1; ;;
		*)
			if [ -z "$action" ]; then
				action="$1"
			else
				echo "action $action already given."
				exit 1
			fi
		;;
	esac
	shift
done

if [ ! -z "$action" ]; then
	if [ ! -p "/tmp/mythtv-restart" ]; then
		echo "mythtv-restart not running."
		exit 1
	else
		echo "$action" > "/tmp/mythtv-restart"
	fi
else
	set -m # Enable Job Control

	trap cleanup EXIT

	# clear the X session error log
	echo "" > $HOME/.xsession-errors

	if [ ! -p "/tmp/mythtv-restart" ]; then
		mkfifo "/tmp/mythtv-restart"
	fi

	last_command_pid=0
	# Loop to get the correct application running
	while [ /bin/true ]; do
		if read line  2> /dev/null < "/tmp/mythtv-restart"; then
			if [ $last_command_pid -ne 0 ]; then
				kill $last_command_pid
				echo "Done with $last_command_pid"
			fi
			
			echo "Got $line"

			start_backend=0
			start_command=''
			kill_process=''
			post_delay=0
			
			case "$line" in
				'frontend')
					start_backend=1
					start_command='/usr/bin/mythfrontend'
					kill_process='/usr/bin/mythfrontend.real'
					post_delay=2
					;;
				'setup')
					start_command='/usr/bin/mythtv-setup'
					kill_process='/usr/bin/mythtv-setup.real'
					;;
				'xterm')
					start_command='/usr/bin/xterm -maximized'
					;;
				'vlc')
					start_command='/usr/bin/vlc --ignore-config'
					;;
				*)
					start_command="$*"
					;;
			esac
			
		#	[ $start_backend -ne 0 ] && perform_start_backend || perform_stop_backend

			[ ! -z "$kill_process" ] && killall "$kill_process"
			if [ ! -z "$start_command" ]; then
				$start_command &
				last_command_pid=$!
			else
				last_command_pid=0
			fi

			echo "Started command with id $last_command_pid"
		fi
	done

	cleanup
fi




#
# EOF
#

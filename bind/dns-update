#!/bin/bash

nsupdate_bin=`which nsupdate`
verbose=0
noop=0
commands=''
nsupdate_opts=''
nsupdate_key=''
rrtype='A'
ttl=86400
server='localhost'

function usage()
{
	echo "dns-update <params>"
	echo "    -h, --help                      shows this help screen"
	echo "    -v,--verbose                    verbose output"
	echo "    --rrtype <rrtype>               specify the RR type for the next operation (default: $rrtype)"
	echo "    --ttl <seconds>                 specify the TTL for the records (default: $ttl)"
	echo "    -k,--key <dnskey>               key to use for the update"
	echo "    --server <dnsserver>            name of the DNS server for updates (default: $server)"
	echo "    -a,--add <dnsname> <ipaddr>     adds the given DNS A record"
	echo "    -d,--delete <dnsname>           deletes the specified DNS A record"
	echo "    -u,--update <dnsname> <ipaddr>  adds the given DNS A record"
	echo "    --update-host <hostname> <addr> updates the given host for the specified address."
	echo "    --import-host <hostname> <dnsserver>"
	echo "                                    import the result from the specified DNS server and update the"
	echo "                                    local DNS server."
	exit 0
}

function reverse_ipv4 {
	echo $1 | nawk -F. '{print $4"."$3"."$2"."$1}'
}

if [ -z "$nsupdate_bin" ]; then
	echo "nsupdate is not available. Please install dnsutils." >&2
	exit 1
fi

command_file=`mktemp`
# parse command line arguments
while [ $# -ne 0 ]; do
	case "$1" in
		"-?"|"-h"|"--help") usage;;
		"-v"|"--verbose") verbose=1; nsupdate_opts="$nsupdate_opts -d"; ;;
		'--noop') noop=1; ;;
		"-a"|"--add")
			echo "update add $2 $ttl $rrtype $3" >> "$command_file"
			shift; shift;
			;;
		"-d"|"--delete") 
			echo "update delete $2 $rrtype" >> "$command_file"
			;;
		"-u"|"--update") 
			echo "update delete $2 $rrtype" >> "$command_file"
			echo "update add $2 $ttl $rrtype $3" >> "$command_file"
			shift; shift;
			;;
		"--update-host")
			hostname="$2"
			addr="$3"
			revaddr=`reverse_ipv4 "$addr"`
			echo "update delete $revaddr.in-addr.arpa." >> "$command_file"
			echo "update delete $hostname." >> "$command_file"
			echo "update add $hostname. $ttl IN A $addr" >> "$command_file"
			echo "update add $revaddr.in-addr.arpa. $ttl PTR $hostname." >> "$command_file"
			shift; shift;
			;;
		'--import-host'|'--import')
			hostname="$2"
			anotherserver="$3"
			if [ -z "$anotherserver" ]; then
				echo "No DNS server to query specified." >&2
				exit 1
			fi
			addresses=`dig +short "$hostname" "@$anotherserver" 2>&1`; RES=$?
			if [ $RES -ne 0 ]; then
				echo "Error while retrieving address of $hostname on $anotherserver" >&2
			elif [ -z "$addresses" ]; then
				echo "No record for $hostname on $anotherserver" >&2
			else
				echo "update delete $hostname." >> "$command_file"
				for addr in $addresses; do
					revaddr=`reverse_ipv4 "$addr"`
					echo "update delete $revaddr.in-addr.arpa." >> "$command_file"
					echo "update add $hostname. $ttl IN A $addr" >> "$command_file"
					echo "update add $revaddr.in-addr.arpa. $ttl PTR $hostname." >> "$command_file"
				done
			fi
			shift; shift;
			;;
		"-k","--key") 
			nsupdate_key="$2"
			shift
			;;
		"--rrtype") 
			rrtype="$2"
			shift
			;;
		"--ttl") 
			ttl="$2"
			shift
			;;
		'--server') 
			server="$2"
			shift
			;;
		*)
			echo "unrecognized argument $1" >&2
			exit 1
		;;
	esac
	shift
done

if [ ! -s "$command_file" ]; then
	echo "No commands specified." >&2
	exit 1
else
	# prepend the server command and append the send command
	commands="server $server\n${commands}send\n"
	if [ ! -z "$nsupdate_key" ]; then
		nsupdate_opts="$nsupdate_opts -k $nsupdate_key"
	fi
	if [ $noop -eq 0 ]; then
		[ $verbose -ne 0 ] && echo "cat \"$command_file\" | \"$nsupdate_bin\" $nsupdate_opts"
		cat "$command_file" | "$nsupdate_bin" $nsupdate_opts
	else
		cat "$command_file"
	fi
fi

rm -f "$command_file"

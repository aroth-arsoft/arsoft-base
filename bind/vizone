#!/bin/bash

rndcbin=`which rndc`
verbose=1

class=''
view=''
zone=''
import=''
default_class='IN'
libdir='/var/lib/bind'
current_editor="$EDITOR"
default_editor='/usr/bin/vim.basic'
zone_frozen=0

function usage() {
	echo "usage: vizone [options] <zone>"
	echo "available options:"
	echo "  -h, --verbose         enable verbose output"
	echo "  -v, --verbose         enable verbose output"
	echo "  --view <viewname>     view which to edit (default: $view)"
	echo "  --class <classname>   class which to edit (default: $default_class)"
	echo "  --zone <zonename>     zone which to edit (default: $zone)"
	echo "  --import <domain>     import a domain from DNS"

	exit 0
}

function log() {
	[ $verbose -ne 0 ] && echo $@
}

function selectZoneFile() {
	
	regex_in_addr_arpa="^([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.in-addr\\.arpa\\.\$"
	regex_ipv4_addr="^([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\$"
	#regex="([0-9]{1,3})"
	#echo "match $zone to $regex_in_addr_arpa"
	if [[ $zone =~ $regex_in_addr_arpa ]]; then
		#echo "matched"
		zonerrname="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}.in-addr.arpa"
	else
		if [[ $zone =~ $regex_ipv4_addr ]]; then
			zonerrname="${BASH_REMATCH[3]}.${BASH_REMATCH[2]}.${BASH_REMATCH[1]}.in-addr.arpa"
			zone="${BASH_REMATCH[3]}.${BASH_REMATCH[2]}.${BASH_REMATCH[1]}.in-addr.arpa."
		else
			zonerrname="$zone"
		fi
	fi
	#echo "zonerrname $zonerrname"
	zonefile="$libdir/${class}_${view}_${zonerrname}.zone"
	if [ ! -f "$zonefile" ]; then
		zonefile="$libdir/${view}_${zonerrname}.zone"
		if [ ! -f "$zonefile" ]; then
			zonefile="$libdir/$zonerrname.zone"
			if [ ! -f "$zonefile" ]; then
				zonefile=''
			fi
		fi
	fi
	
	zonerrfile="$libdir/${class}_${view}_${zonerrname}.rr"
	if [ ! -f "$zonerrfile" ]; then
		zonerrfile="$libdir/${view}_${zonerrname}.rr"
		if [ ! -f "$zonerrfile" ]; then
			zonerrfile="$libdir/$zonerrname.rr"
			if [ ! -f "$zonerrfile" ]; then
				zonerrfile=''
			fi
		fi
	fi
	if [ -z "$zonefile" ]; then
		echo "Zonefile $zonefile for $zone (class $class, view $view) does not exist." && false
		return
	fi
	zonetype=`cat "$zonefile"  | awk '/type (master|slave|forward);/ { print substr($2,1,length($2)-1) }'`
	if [ "$zonetype" != 'master' ]; then
		echo "The zone $zone (class $class, view $view) is configured as $zonetype and cannot be edited." &&\
			echo "The zone can only be edited on the master." &&\
			false
		return
	fi
	
	if [ -z "$zonerrfile" ]; then
		echo "Zone RR file $zonerrfile for $zone (class $class, view $view) does not exist." && false
		return
	fi
	
	if [ ! -w "$zonerrfile" ]; then
		echo "Zone RR file $zonerrfile for $zone (class $class, view $view) is read-only." && false
		return
	fi
	
	zonesoa=`cat "$zonerrfile"  | awk '/SOA/ { insoa=1 } { if(insoa) { if($1==")") { insoa=0; print $1} else { print $0 }  } }'`
	zoneserial=`echo "$zonesoa" | awk '/serial/ { print $1} '`
	zonedate="${zoneserial:0:8}"
	zoneserialno="${zoneserial:8}"

}

function prepareEditFile() {
	editfile=`mktemp`
	patchfile=`mktemp`
	cat "$zonerrfile" | sed "s/$zoneserial/$zonenewserial/" > "$editfile" && cp "$editfile" "$patchfile"
}

function beginEdit() {
	log "$rndcbin" freeze "$zone" "$class" "$view"
	msg=`LANG=C "$rndcbin" freeze "$zone" "$class" "$view"`
	RES=$?

	zonenewdate=`date +"%Y%m%d"`
	if [ "$zonedate" == "$zonenewdate" ]; then
		zonenewserialno=$(($zoneserialno + 1))
	else
		zonenewserialno=1
	fi
	zonenewserial=`printf "%s%02d" "$zonenewdate" "$zonenewserialno"`
	if [ $RES -ne 0 ]; then
		zone_frozen=0
		if [[ "$msg" =~ "already frozen" ]]; then
			log "Zone $zone $class $view already frozen."
			prepareEditFile
			true
		else
			log "Failed to freeze zone $zone $class $view. Error $msg"
			false
		fi
	else
		zone_frozen=1
		prepareEditFile
	fi
}

function rollback() {
	if [ $zone_frozen -ne 0 ]; then
		log "$rndcbin" thaw "$zone" "$class" "$view"
		LANG=C "$rndcbin" thaw "$zone" "$class" "$view"
		RES=$?
		if [ $RES -eq 0 ]; then
			rm "$editfile" && rm "$patchfile"
			zone_frozen=0
		else
			log "Failed to thaw zone $zone $class $view on rollback. Error $msg"
			log "Keeping $editfile and $patchfile for recovery purposes."
		fi
	else
		log "Zone $zone $class $view was already frozen. Leave it frozen."
	fi
}

function commit() {
	d=`diff -u "$patchfile" "$editfile"`
	if [ $? -eq 0 ]; then
		echo "No changes. abort"
		CHANGED=0
	else
		cp "$editfile" "$zonerrfile"
		CHANGED=1
	fi

	if [ $zone_frozen -ne 0 ]; then
		log "$rndcbin" thaw "$zone" "$class" "$view"
		LANG=C "$rndcbin" thaw "$zone" "$class" "$view"
		RES=$?
		if [ $RES -eq 0 ]; then
			rm "$editfile" && rm "$patchfile"
			zone_frozen=0
		else
			log "Failed to thaw zone $zone $class $view on commit. Error $msg"
			log "Keeping $editfile and $patchfile for recovery purposes."
		fi
	else
		log "Zone $zone $class $view was already frozen. Leave it frozen."
	fi
}


# parse command line arguments
while [ $# -ne 0 ]; do        
	case "$1" in          
	"-?"|"-h"|"--help") usage;; 
	"-v"|"--verbose") verbose=1 ;;
	"--view") view="$2"; shift; ;;
	"--class") class="$2"; shift; ;;
	"--zone") zone="$2"; shift; ;;
	"--import") import="$2"; shift; ;;
	"in") [ -z "$class" ] && class='in' || echo "Ignore second class IN"; ;;
	"in6") [ -z "$class" ] && class='in6' || echo "Ignore second class IN6"; ;;
	*)                          
		if [ -z "$zone" ]; then
			zone="$1"
		else
			if [ -z "$view" ]; then
				view="$1"
			else
				echo "Zone $zone and view $view already specified."
				exit 1
			fi
		fi                                  
	;;                                      
	esac                                    
	shift                                   
done

if [ -z "$class" ]; then
	class="$default_class"
fi

if [ -z "$current_editor" ]; then
	current_editor="$default_editor"
fi

if [ ! -z "$import" ]; then
	if [ ! -x /usr/bin/dig ]; then
		echo "dig not installed. Please install the package dnsutils." 1>&2
		exit 1
	fi
	all_records=`/usr/bin/dig +noall +answer axfr "$import"`
	RES=$?
	if [ $RES -ne 0 ]; then
		all_records=`/usr/bin/dig +noall +answer "$import" any`
		[ $RES -ne 0 ] && all_records=''
	fi
	if [ ! -z "$all_records" ]; then
		editfile=`mktemp`
		echo "$all_records" | awk '{print $2, $1, $3, $4, $5}' > "$editfile"
		"$current_editor" "$editfile"
	else
		echo "Failed to download $import." 1>&2
		exit 1
	fi
else
	if [ -z "$zone" ]; then
		echo "No zone specified."
		exit 1
	else
		selectZoneFile && beginEdit
		if [ $? -eq 0 ]; then
			"$current_editor" "$editfile"
			if [ $? -eq 0 ]; then
				commit
			else
				rollback
				echo "Editing has been canceled"
			fi
		fi
	fi
fi
